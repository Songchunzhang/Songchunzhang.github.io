<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EM算法以及推广</title>
      <link href="/2020/06/15/EM%E7%AE%97%E6%B3%95%E5%8F%8A%E6%8E%A8%E5%B9%BF/"/>
      <url>/2020/06/15/EM%E7%AE%97%E6%B3%95%E5%8F%8A%E6%8E%A8%E5%B9%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="章节目录"><a href="#章节目录" class="headerlink" title="章节目录"></a>章节目录</h3><ol><li>EM算法的引入<ol><li>EM算法</li><li>EM算法的导出</li><li>EM算法在非监督学习中的应用</li></ol></li><li>EM算法的收敛性</li><li>EM算法在高斯混合模型学习中的应用<ol><li>高斯混合模型</li><li>高斯混合模型参数估计的EM算法</li></ol></li><li>EM算法的推广<ol><li>F函数的极大极大算法</li></ol></li></ol><a id="more"></a><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><ul><li><p><strong>概率模型</strong>有时既含有观测变量，又含有隐变量或潜在变量。这句很重要。</p></li><li><p>这章如果看三硬币有疑问，可以往后继续看，看到高斯混合模型，然后再回头理解三硬币。有不理解的地方，可以重新看对应问题的定义，重新理解各个符号的意义，因为这章开始，需要分析的问题和之前的分类问题有差异，任务不同了要理解需求。希望对学习有帮助。</p></li><li><p>EM算法可以用于<strong>生成模型</strong>的非监督学习，EM算法是个一般方法，不具有具体模型。</p><blockquote><p>EM算法是一种迭代算法，用于含有隐变量的概率模型的极大似然估计，或极大后验概率估计。</p></blockquote><p>本书<a href="../CH12/README.md">CH12</a>在对比各种模型的策略的时候，从这章开始，学习策略都是MLE，损失函数都是对数似然损失。体现了这一类问题的共性与联系。</p></li><li><p>这里面注意体会不同变量的大小以及对应的取值范围。</p></li><li><p>一个$m\times n\times k$的矩阵可能可以划分成$n$个$m\times k$的形式，这点理解下。</p></li><li><p>涉及混合模型的部分推导有很多求和，注意体会是按照<strong>样本</strong>做的，还是按照<strong>模型</strong>做的，也就是操作的域</p></li><li><p>如果对PDF，高斯分布，边缘概率分布，协方差矩阵不清楚，可以在这个章节从GMM的角度扩展阅读下，一定会有收获。</p></li><li><p>似然和概率的关系可以推广了解，这章关于概率和似然的符号表示，可能会有点看不懂，比如$P_{157}$中的部分表述。可以参考引用内容<sup><a href="#fn_3" id="reffn_3">3</a></sup>, 概率和似然是同样的形式描述的都是<strong>可能性</strong>，$P(Y|\theta)$是一个两变量的函数，似然是给定结果，求参数可能性；概率是给定参数求结果可能性。</p><blockquote><p>Suppose you have a probability model with parameters $\theta$.<br>$p(x|\theta)$ has two names.<br>It can be called the <strong>probability of $x$</strong> (given $\theta$),<br>or the <strong>likelihood of $\theta$</strong> (given that $x$  was observed).</p></blockquote></li><li><p>学习过程中注意<strong>观测数据</strong>在EM算法每次迭代中的意义。</p></li><li><p>GMM中注意区分$\alpha_k$和$\gamma_{jk}$的差异，直觉上都有一种归属的感觉，$\gamma_{jk}$是二值函数，$\alpha_k$是一种概率的表示。$\gamma_{jk}$是one-hot encoding(also: 1-of-K representation)，还有$\hat\gamma_{jk}$这个是个估计注意和$\gamma_{jk}$的关系</p></li><li><p>GMM这里面实际上还涉及到一个概念叫做凸组合(Convex Combination)<sup><a href="#fn_4" id="reffn_4">4</a></sup>，是凸几何领域的一个概念，点的线性组合，所有系数都非负且和为1。点集的凸包等价于该点集的凸组合。</p></li><li><p>无论是三硬币还是GMM，采样的过程都是如下:</p><blockquote><ol><li>Sample $z_i \sim p(z|\pi)$</li><li>Sample $x_i \sim p(x|\pi)$</li></ol></blockquote><p>注意，这里用到了$\pi$，在强化学习中，随机性策略$\pi(x,a)$表示为状态$x$下选择动作$a$的概率。</p></li><li><p>关于EM算法的解释<br>注意这里EM不是模型，是个一般方法，不具有具体的模型，这点前面已经提到</p><ol><li>PRML<br>$kmeans \rightarrow GMM \rightarrow EM$<br>所以，EM应用举例子为kmeans也OK。而且，西瓜书$P_{165}$上有说， <code>k均值聚类算法就是一个典型的EM算法</code></li><li>统计学习方法<ol><li>$MLE \rightarrow B$</li><li>$F$函数的极大-极大算法</li></ol></li></ol></li><li><p>这个repo里面实现了BMM算法和GMM算法两种混合模型</p></li><li><p>HMM也是Discrete <strong>Dynamic Model</strong>，从图模型角度考虑，可以发现HMM和卡尔曼滤波以及粒子滤波深层之间的联系。这部分内容在PRML中有讨论。</p></li><li><p>书中图9.1说一下，可以参考<a href="../CH08/README.md">CH08</a>的部分内容，关于Bregman distance的那部分说明。</p></li><li><p>HMM作了两个基本假设，实际上是在说在图模型中，存在哪些<strong>边</strong>。</p></li></ul><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><blockquote><p>一般地，用$Y$表示观测随机变量的数据，$Z$表示隐随机变量的数据。$Y$和$Z$一起称为<strong>完全数据</strong>(complete-data)，观测数据$Y$又称为<strong>不完全数据</strong>(incomplete-data)</p></blockquote><p>上面这个概念很重要，Dempster在1977年提出EM算法的时候文章题目就是《Maximum likelihood from incomplete data via the EM algorithm》，具体看书中本章参考文献<sup><a href="#fn_3" id="reffn_3">3</a></sup></p><blockquote><p>假设给定观测数据$Y$，其概率分布是$P(Y|\theta)$，其中$\theta$是需要估计的模型参数<br>那么不完全数据$Y$的似然函数是$P(Y|\theta)$，对数似然函数是$L(\theta)=\log P(Y|\theta)$</p><p>假设$Y$和$Z$的联合概率分布是$P(Y,Z|\theta)$，那么完全数据的对数似然函数是$\log P(Y,Z|\theta)$</p></blockquote><p>上面这部分简单对应一下，这里说明一下，你看到下面概率分布和似然函数形式看起来一样。在概率中，$\theta$已知, 求$Y$，在似然函数中通过已知的Y去求$\theta$观测数据$Y$</p><p>有一点要注意下, 这里没有出现$X$, 在<strong>9.1.3</strong>节中有提到一种理解</p><blockquote><ul><li>有时训练数据只有输入没有对应的输出${(x_1,\cdot),(x_2,\cdot),\dots,(x_N,\cdot)}$，从这样的数据学习模型称为非监督学习问题。</li><li>EM算法可以用于生成模型的非监督学习。</li><li>生成模型由联合概率分布$P(X,Y)$表示，可以认为非监督学习训练数据是联合概率分布产生的数据。$X$为观测数据， $Y$为未观测数据。</li></ul></blockquote><p>有时候，只观测显变量看不到关系，就需要把隐变量引进来。</p><h2 id="混合模型"><a href="#混合模型" class="headerlink" title="混合模型"></a>混合模型</h2><p>书中用三硬币模型做为引子，在学习这部分内容的时候，注意体会观测数据的作用。</p><h3 id="伯努利混合模型-三硬币模型"><a href="#伯努利混合模型-三硬币模型" class="headerlink" title="伯努利混合模型(三硬币模型)"></a>伯努利混合模型(三硬币模型)</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>书中用例子来介绍EM算法的问题，并给出了EM算法迭代求解的过程，具体例子描述见<strong>例9.1</strong>，这块如果不懂，可以跳过，看完后面高斯混合模型再回来看。</p><p>问题的描述过程中有这样一句：独立的重复$n$次实验(这里$n=10$)，观测结果如下:</p><p><code>1,1,0,1,0,0,1,0,1,1</code></p><p>思考上面这个观测和<code>1,1,1,1,1,1,0,0,0,0</code>有区别么?</p><p>没有任何信息的前提下，我们得到上面的观测数据可以假定是一个<strong>二项分布</strong>的形式，参数$n=10, p=0.6$</p><p>把$k=6$次成功分布在$n=10$次试验中有$C(10,6)$种可能.</p><p>所以上面两个观测序列，可能出自同一个模型。在这个问题的求解上是没有区别的，测试案例$test_t91$做了这个说明，可以参考。</p><p>我们通过一段代码来生成这个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np Engine</span><br><span class="line"></span><br><span class="line">p = <span class="number">0.6</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="comment"># np.random.seed(2018)</span></span><br><span class="line">flag_a = <span class="number">1</span></span><br><span class="line">flag_b = <span class="number">1</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> flag_a <span class="keyword">or</span> flag_b:</span><br><span class="line">    tmp = np.random.binomial(<span class="number">1</span>, p, n)</span><br><span class="line">    <span class="keyword">if</span> (tmp == np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])).all():</span><br><span class="line">        flag_a = <span class="number">0</span></span><br><span class="line">        print(<span class="string">"[1,1,1,1,1,1,0,0,0,0] at %d\n"</span> % cnt)</span><br><span class="line">    <span class="keyword">if</span> (tmp == np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>])).all():</span><br><span class="line">        flag_b = <span class="number">0</span></span><br><span class="line">        print(<span class="string">"[1,1,0,1,0,0,1,0,1,1] at %d\n"</span> % cnt)</span><br><span class="line">    cnt += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>实际上题目的描述中说明了观测数据生成的过程，这些参数是未知的，所以需要对这些参数进行估计。</p><p>解的过程记录在这里。</p><p>三硬币模型可以写作</p><script type="math/tex; mode=display">\begin{equation}        \begin{aligned}            P(y|\theta)&=\sum_z P(y,z|\theta) \\            &=\sum_z P(z|\theta)P(y|z,\theta) \\            &=\pi p^y (1-p)^{1-y} + (1-\pi)q^y(1-q)^{1-y}        \end{aligned}\end{equation}</script><p>以上</p><ol><li>随机变量$y$是观测变量，表示一次试验观测的结果是<strong>1或0</strong></li><li>随机变量$z$是隐变量，表示未观测到的掷硬币$A$的结果</li><li>$\theta=(\pi,p,q)$是模型参数</li><li>这个模型是<strong>以上数据</strong>(1,1,0,1,0,0,1,0,1,1)的生成模型</li></ol><p>观测数据表示为$Y=(Y_1, Y_2, Y_3, \dots, Y_n)^T$, 未观测数据表示为$Z=(Z_1,Z_2, Z_3,\dots, Z_n)^T$, 则观测数据的似然函数为</p><blockquote><p>其实觉得这里应该是小写的$y=(y_1,y_2,\dots,y_n), z=(z_1, z_2, \dots,z_n)$</p><script type="math/tex; mode=display">P(Y|\theta) = \sum\limits_{Z}P(Z|\theta)P(Y|Z,\theta)</script><p>注意这里的求和是下面的”+”描述的部分</p></blockquote><p>即</p><script type="math/tex; mode=display">P(Y|\theta)=\prod\limits^{n}_{j=1}[\pi p^{y_j}(1-p)^{1-y_j}+(1-\pi)q^{y_j}(1-q)^{1-y_j}]</script><p>注意这里连乘是$Y\rightarrow y_j$出来的, 不理解看似然定义.</p><p>考虑求模型参数$\theta=(\pi,p,q)$的极大似然估计, 即</p><script type="math/tex; mode=display">\hat \theta = \arg\max\limits_{\theta}\log P(Y|\theta)</script><p>这个题目的标准答案实际上也是未知的，因为可能生成这样的观测的假设空间太大。</p><h4 id="三硬币模型的EM算法"><a href="#三硬币模型的EM算法" class="headerlink" title="三硬币模型的EM算法"></a>三硬币模型的EM算法</h4><h5 id="1-初值"><a href="#1-初值" class="headerlink" title="1.初值"></a>1.初值</h5><p>EM算法首选参数初值，记作$\theta^{(0)}=(\pi^{(0)},p^{(0)}, q^{(0)})$, 然后迭代计算参数的估计值。</p><p>如果第$i$次迭代的模型参数估计值为$\theta^{(i)}=(\pi^{(i)}, p^{(i)}, q^{(i)})$</p><h5 id="2-E步"><a href="#2-E步" class="headerlink" title="2.E步"></a>2.E步</h5><p>那么第$i+1$ 次迭代的模型参数估计值表示为</p><script type="math/tex; mode=display">\mu_j^{i+1} = \frac{\pi^{(i)}(p^{(i)})^{y_j}(1-p^{(i)})^{1-y_j}}{\pi^{(i)}(p^{(i)})^{y_j}(1-p^{(i)})^{1-y_j} + (1-\pi^{(i)})(q^{(i)})^{y_j}(1-q^{(i)})^{1-y_j}}</script><p>因为是硬币，只有0，1两种可能，所有有上面的表达。</p><p>这个表达方式还可以拆成如下形式</p><script type="math/tex; mode=display">\mu_j^{i+1} =\begin{cases}\frac{\pi^{(i)}p^{(i)}}{\pi^{(i)}p^{(i)} + (1-\pi^{(i)})q^{(i)}}&, y_j = 1\\\frac{\pi^{(i)}(1-p^{(i)})}{\pi^{(i)}(1-p^{(i)}) + (1-\pi^{(i)})(1-q^{(i)})}&, y_j = 0\\\end{cases}</script><p>所以, 这步(求$\mu_j$)干了什么，样本起到了什么作用？</p><p> 这一步，通过假设的参数，计算了不同的样本对假设模型的响应($\mu_j$)，注意这里因为样本($y_j$)是二值的，所以，用$\{y_j, 1-y_j\}$ 构成了one-hot的编码，用来表示样本归属的假设。</p><p>以上，有点绕。</p><p>这一步是什么的期望？书中有写，<strong>观测数据来自硬币$B$的概率, 在二项分布的情况下, 响应度和概率是一个概念. </strong>这个说明，有助于后面M步公式的理解。</p><h5 id="3-M步"><a href="#3-M步" class="headerlink" title="3.M步"></a>3.M步</h5><script type="math/tex; mode=display">\begin{align}\pi^{(i+1)} &= \frac{1}{n}\sum_{j=1}^{n}\mu_j^{(i+1)}\\\color{red}p^{(i+1)} &= \frac{\sum_{j=1}^{n}\mu_j^{(i+1)}y_j}{\sum_{j=1}^{n}\mu_j^{(i+1)}}\\\color{red}q^{(i+1)} &= \frac{\sum_{j=1}^{n}(1-\mu_j^{(i+1)})y_j}{\sum_{j=1}^{n}(1-\mu_j^{(i+1)})}\end{align}</script><p>上面，红色部分的公式从<code>观测数据是来自硬币B的概率</code>这句来理解。</p><h5 id="初值影响"><a href="#初值影响" class="headerlink" title="初值影响"></a>初值影响</h5><p>这个例子里面0.5是个合理又牛逼的初值。迭代收敛的最后结果是(0.5, 0.6, 0.6)</p><p>这个结果说明，如果A是均匀的，那么一个合理的解就是B，C是同质的。他们的分布情况和观测的分布一致。</p><p>在测试案例$test_e91$中有计算这部分的结果，注意看，这种简单的模型其实收敛的很快。</p><h5 id="p-q-含义"><a href="#p-q-含义" class="headerlink" title="p,q 含义"></a>p,q 含义</h5><p>这里面p对应了A =1，B=1，q对应了A=0，C=1</p><p>这三个公式可以改写成如下形式:</p><script type="math/tex; mode=display">\begin{align}\pi^{(i+1)} &= \frac{1}{n}\sum_{j=1}^{n}\mu_j^{(i+1)}\\\color{red}p^{(i+1)} &= \frac{\sum_{j=1}^{n}\mu_j^{(i+1)}y_j}{\sum_{j=1}^{n}(\mu_j^{(i+1)}y_j+\mu_j^{(i+1)}(1-y_j)}\\\color{red}q^{(i+1)} &= \frac{\sum_{j=1}^{n}(1-\mu_j^{(i+1)})y_j}{\sum_{j=1}^{n}((1-\mu_j^{(i+1)})y_j+(1-\mu_j^{(i+1)})(1-y_j))}\end{align}</script><p>$\pi$的表达式回答这样一个问题:  刷了这么多样本，拿到一堆数，那么$\pi$应该是多少，均值十个比较好的选择。</p><p>$p$的表达式回答这样一个问题:  如果我知道每个结果$y_j$以$\mu_j$的可能来自硬币B(A=1)，那么用这些数据刷出来他可能是正面的概率。这里面$\mu_j$对应了$A=1$</p><p>$q$的表达式同理，其中$1-\mu_j$对应了$A=0$</p><p>到后面讲高斯混合模型的时候，可以重新审视这里</p><script type="math/tex; mode=display">\begin{aligned}\alpha_0& \leftrightarrow \pi \\\mu_0& \leftrightarrow p^{y_j}(1-p)^{1-y_j}\\\alpha_1& \leftrightarrow 1-\pi\\\mu_1& \leftrightarrow q^{y_j}(1-q)^{1-y_j}\end{aligned}</script><p>以上对应了包含两个分量的伯努利混合模型, BMM, 包含四个参数, 因为$\alpha_k$满足等式约束, 所以通常会有三个参数, 另外参见习题$9.3$中有提到<code>两个分量的高斯混合模型的五个参数</code>实际上也是因为等式约束.</p><p><a href="bmm.py">bmm.py</a>对伯努利混合模型做了实现, 有几点说明一下:</p><ol><li><p>$(p^{(i)})^{y_i}(1-p^{(i)})^{1-y_i}$这个表达式对应了伯努利分布的概率密度, 可以表示成矩阵乘法, 尽量不要用for, 效率会差</p></li><li><p>书中$e_{91}$的表达中, 采用了$\pi, p, q$来表示, 注意在题目的说明部分有说明三个符号的含义</p></li><li><p>实际上不怎么抛硬币, 但是0-1的伯努利分布很多, 在书中算法9.4部分, 有这样一个说明:</p><blockquote><p>当参数$\theta$的维数为$d(d\ge2 )$的时候, 可以采用一种特殊的GEM算法, 它将算法的M步分解成d次条件极大化, 每次只改变参数向量的一个分量,其余量不改变.</p></blockquote></li></ol><h3 id="EM算法另外视角"><a href="#EM算法另外视角" class="headerlink" title="EM算法另外视角"></a>EM算法另外视角</h3><blockquote><p>输入: 观测变量数据$Y$，隐变量数据$Z$，联合分布$P(Y,Z|\theta)$，条件分布$P(Z|Y,\theta)$</p><p>输出: 模型参数$\theta$</p><ol><li><p>选择参数的初值$\theta^{(0)}$，开始迭代</p></li><li><p>E步：记$\theta^{(i)}$为第 $i$ 次迭代参数$\theta$的估计值，在第$i+1$次迭代的$E$步，计算</p><script type="math/tex; mode=display">\begin{align}Q(\theta, \theta^{(i)}) =& E_Z[\log P(Y,Z|\theta)|Y,\theta^{(i)}]\\=&\sum_Z\color{red}\log P(Y,Z|\theta)\color{green}P(Z|Y, \theta^{(i)})\end{align}</script></li><li><p>M步<br>求使$Q(\theta, \theta^{(i)})$最大化的$\theta$，确定第$i+1$次迭代的参数估计值</p></li></ol><script type="math/tex; mode=display">\theta^{(i+1)}=\arg\max_\theta Q(\theta, \theta^{(i)})</script></blockquote><h4 id="Q-函数"><a href="#Q-函数" class="headerlink" title="Q 函数"></a>Q 函数</h4><p>注意Q函数的定义，可以帮助理解上面E步中的求和表达式</p><p>完全数据的<strong>对数似然函数$\log P(Y, Z|\theta)$关于</strong>给定观测数据$Y$的当前参数$\theta^{(i)}$下对为观测数据$Z$的<strong>条件概率分布$P(Z|Y,\theta^{(i)})$的期望</strong>称为Q函数。</p><h4 id="BMM的EM算法"><a href="#BMM的EM算法" class="headerlink" title="BMM的EM算法"></a>BMM的EM算法</h4><blockquote><p>输入: 观测变量数据$y_1, y_2, \dots, y_N$, 伯努利混合模型</p><p>输出: 伯努利混合模型参数</p><ol><li>选择参数的初始值开始迭代, $2K$ 个参数</li><li>E步:<script type="math/tex; mode=display">\hat\gamma_{jk}=\frac{\alpha_kBern(y_j|\theta_k)}{\sum_{k=1}^K\alpha_kBern(y_j|\theta_k)}=\frac{\alpha_k\mu_k^{y_j}(1-\mu_k)^{1-y_j}}{\sum_{k=1}^K\alpha_k\mu_k^{y_j}(1-\mu_k)^{1-y_j}}, j=1,2,\dots,N; k=1,2,\dots,K</script></li><li>M步:<script type="math/tex; mode=display">\hat\mu_k=\frac{\sum_{j=1}^N\hat\gamma_{jk}y_j}{\sum_{j=1}^N\hat\gamma_{jk}}\\\hat\alpha_k=\frac{n_k}{N}</script></li></ol></blockquote><h4 id="目标函数L"><a href="#目标函数L" class="headerlink" title="目标函数L"></a>目标函数L</h4><script type="math/tex; mode=display">L(\theta)=\log P(Y|\theta)=\log \sum_Z P(Y,Z|\theta)=\log(\sum_Z P(Y|Z,\theta)P(Z|\theta))</script><p>目标函数是不完全数据的对数似然</p><h4 id="EM算法导出"><a href="#EM算法导出" class="headerlink" title="EM算法导出"></a>EM算法导出</h4><p>书中这部分内容回答为什么EM算法能近似实现对观测数据的极大似然估计？</p><script type="math/tex; mode=display">\begin{aligned}L(\theta)-L\left(\theta^{(i)}\right) &=\log \left(\sum_{Z} P\left(Y | Z, \theta^{(i)}\right) \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Y | Z, \theta^{(i)}\right)}\right)-\log P\left(Y | \theta^{(i)}\right) \\& \geq \sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Z | Y, \theta^{(i)}\right)}-\log P\left(Y | \theta^{(i)}\right) \\&=\sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Z | Y, \theta^{(i)}\right)}-\sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log P\left(Y | \theta^{(i)}\right) \\&=\sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Z | Y, \theta^{(i)}\right) P\left(Y | \theta^{(i)}\right)}\end{aligned}</script><p>以上用于推导迭代过程中两次$L$会变大， 这里面红色部分是后加的方便理解前后两步之间的推导。绿色部分是为了构造期望， 进而应用琴声不等式。在这里凑项应该是凑$P(Z|Y,\theta^{(i)})$，书中这部分可能是笔误。</p><p>这里也写一下琴声不等式</p><script type="math/tex; mode=display">\log \sum_j \lambda_j y_j \ge \sum_j \lambda_j \log y_j, s.t., \lambda_j \ge 0, \sum_j \lambda_j = 1</script><p>所以，这里的这一项不是随便凑的。</p><p>TODO:更新下这个图</p><h3 id="高斯混合模型"><a href="#高斯混合模型" class="headerlink" title="高斯混合模型"></a>高斯混合模型</h3><p><strong>混合模型</strong>，有多种，高斯混合模型是最常用的。</p><p>高斯混合模型(Gaussian Mixture Model)是具有如下<strong>概率分布</strong>的模型:</p><script type="math/tex; mode=display">P(y|\theta)=\sum\limits^{K}_{k=1}\alpha_k\phi(y|\theta_k)</script><p>其中，$\alpha_k$是系数，$\alpha_k\ge0$，$\sum\limits^{K}_{k=1}\alpha_k=1$, $\phi(y|\theta_k)$ 是<strong>高斯分布密度</strong>，$\theta_k=(\mu,\sigma^2)$</p><script type="math/tex; mode=display">\phi(y|\theta_k)=\frac{1}{\sqrt{2\pi}\sigma_k}\exp\left(-\frac{(y-\mu_k)^2}{2\sigma_k^2}\right)</script><p>上式表示第k个<strong>分</strong>模型。</p><p>以上, 注意几点：</p><ol><li>GMM的描述是概率分布，形式上可以看成是加权求和</li><li><p>加权求和的权重$\alpha$满足$\sum_{k=1}^K\alpha_k=1$的约束</p></li><li><p>求和符号中除去权重的部分，是高斯分布密度(PDF)。高斯混合模型是一种$\sum(权重\times 分布密度)=分布$的表达<br> 高斯混合模型的参数估计是EM算法的一个重要应用，隐马尔科夫模型的非监督学习也是EM算法的一个重要应用。</p></li><li><p>书中描述的是一维的高斯混合模型，d维的形式如下<sup><a href="#fn_2" id="reffn_2">2</a></sup>，被称作多元正态分布，也叫多元高斯分布</p><script type="math/tex; mode=display">\phi(y|\theta_k)=\frac{1}{\sqrt{(2\pi)^d|\Sigma|}}\exp\left(-\frac{(y-\mu_k)^T\Sigma^{-1}(y-\mu_k)}{2}\right)</script><p>其中，协方差矩阵$\Sigma\in \R^{n\times n}$</p></li><li><p>另外，关于高斯模型的混合，还有另外一种混合的方式，沿着时间轴的方向做混合。可以理解为滤波器，典型的算法就是Kalman Filter，对应了时域与频域之间的关系，两个高斯的混合依然是高斯，混合的方法是卷积，而不是简单的加法，考虑到的是概率密度的混合，也是一种线性的加权。</p></li></ol><h4 id="GMM的EM算法"><a href="#GMM的EM算法" class="headerlink" title="GMM的EM算法"></a>GMM的EM算法</h4><p>问题描述:</p><p>已知观测数据$y_1, y_2, \dots , y_N$，由高斯混合模型生成</p><script type="math/tex; mode=display">P(y|\theta)=\sum_{k=1}^K\alpha_k\phi(y|\theta_k)</script><p>其中， $\theta=(\alpha_1,\alpha_2,\dots,\alpha_K;\theta_1,\theta_2,\dots,\theta_K)$</p><p>补充下，不完全数据的似然函数应该是</p><script type="math/tex; mode=display">\begin{align}P(y|\theta)=&\prod_{j=1}^NP(y_j|\theta)\\=&\prod_{j=1}^N\sum_{k=1}^K\alpha_k\phi(y|\theta_k)\end{align}</script><p>使用EM算法估计GMM的参数$\theta$</p><h5 id="1-明确隐变量-初值"><a href="#1-明确隐变量-初值" class="headerlink" title="1. 明确隐变量, 初值"></a>1. 明确隐变量, 初值</h5><ul><li><p>观测数据$y_j, j=1,2,\dots,N$这样产生, 是<strong>已知的</strong>:</p><ol><li>依概率$\alpha_k$<strong>选择第$k$个</strong>高斯分布分模型$\phi(y|\theta_k)$;</li><li>依第$k$个分模型的概率分布$\phi(y|\theta_k)$生成观测数据$y_j$</li><li><p>反映观测数据$y_j$来自第$k$个分模型的数据是<strong>未知的</strong>, $k=1,2,\dots,K$ 以<strong>隐变量$\gamma_{jk}$</strong>表示<br><strong>注意这里$\gamma_{jk}$的维度$(j\times k)$</strong></p><script type="math/tex; mode=display">\gamma_{jk}=\begin{cases}1, &第j个观测来自第k个分模型\\0, &否则\end{cases}\\j=1,2,\dots,N; k=1,2,\dots,K; \gamma_{jk}\in\{0,1\}</script><p>注意, 以上说明有几个假设:</p></li><li><p>隐变量和观测变量的数据对应, 每个观测数据，对应了一个隐变量，$\gamma_{jk}$是一种one-hot的形式。</p></li><li>具体的单一观测数据是混合模型中的某一个模型产生的</li></ol></li><li><p>完全数据为$(y_j,\gamma_{j1},\gamma_{j2},\dots,\gamma_{jK},k=1,2,\dots,N)$</p></li><li><p>完全数据似然函数</p><script type="math/tex; mode=display">\begin{aligned}P(y,\gamma|\theta)=&\prod_{j=1}^NP(y_j,\gamma_{j1},\gamma_{j2},\dots,\gamma_{jK}|\theta)\\=&\prod_{k=1}^K\prod_{j=1}^N\left[\alpha_k\phi(y_j|\theta_k)\right]^{\gamma_{jk}}\\=&\prod_{k=1}^K\alpha_k^{n_k}\prod_{j=1}^N\left[\phi(y_j|\theta_k)\right]^{\gamma_{jk}}\\=&\prod_{k=1}^K\alpha_k^{n_k}\prod_{j=1}^N\left[\frac{1}{\sqrt{2\pi}\sigma_k}\exp\left(-\frac{(y_j-\mu_k)^2}{2\sigma^2}\right)\right]^{\gamma_{jk}}\\\end{aligned}</script><p>其中$n_k=\sum_{j=1}^N\gamma_{jk}, \sum_{k=1}^Kn_k=N$</p></li><li><p>完全数据对数似然函数</p><script type="math/tex; mode=display">\log P(y,\gamma|\theta)=\sum_{k=1}^K\left\{n_k\log \alpha_k+\sum_{j=1}^N\gamma_{jk}\left[\log \left(\frac{1}{\sqrt{2\pi}}\right)-\log \sigma_k -\frac{1}{2\sigma^2}(y_j-\mu_k)^2\right]\right\}</script><h5 id="2-E步-确定Q函数"><a href="#2-E步-确定Q函数" class="headerlink" title="2. E步,确定Q函数"></a>2. E步,确定Q函数</h5></li></ul><p>把$Q$ 函数表示成参数形式</p><script type="math/tex; mode=display">\begin{aligned}Q\left(\theta, \theta^{(i)}\right) &=E\left[\log P(y, \gamma | \theta) | y, \theta^{(i)}\right] \\&=E\left\{\sum_{k=1}^{K}\left\{n_{k} \log \alpha_{k}+\sum_{j=1}^{N} \gamma_{j k}\left[\log \left(\frac{1}{\sqrt{2 \pi}}\right)-\log \sigma_{k}-\frac{1}{2 \sigma^{2}\left(y_{j}-\mu_{k}\right)^{2}}\right]\right\}\right\} \\&=E\left\{\sum_{k=1}^{K}\left\{\sum_{j=1}^{N} \gamma_{j k} \log \alpha_{k}+\sum_{j=1}^{N} \gamma_{j k}\left[\log \left(\frac{1}{\sqrt{2 \pi}}\right)-\log \sigma_{k}-\frac{1}{2 \sigma^{2}\left(y_{j}-\mu_{k}\right)^{2}}\right]\right\}\right\} \\&=\sum_{k=1}^{K}\left\{\sum_{j=1}^{N}\left(E \gamma_{j k}\right) \log \alpha_{k}+\sum_{j=1}^{N}\left(E \gamma_{j k}\right)\left[\log \left(\frac{1}{\sqrt{2 \pi}}\right)-\log \sigma_{k}-\frac{1}{2 \sigma^{2}\left(y_{j}-\mu_{k}\right)^{2}}\right]\right\}\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}\hat \gamma _{jk}= &\color{purple}E(\gamma_{jk}|y,\theta)=P(\gamma_{jk}=1|y,\theta)\\=&\frac{P(\gamma_{jk}=1,y_j|\theta)}{\sum_{k=1}^KP(\gamma_{jk}=1,y_j|\theta)}\\=&\frac{P(y_j|\color{red}\gamma_{jk}=1,\theta\color{black})\color{green}P(\gamma_{jk}=1|\theta)}{\sum_{k=1}^KP(y_j|\gamma_{jk}=1,\theta)P(\gamma_{jk}=1|\theta)}\\=&\frac{\color{green}\alpha_k\color{black}\phi(y_j|\color{red}\theta_k)}{\sum_{k=1}^K\alpha_k\phi(y_j|\theta_k)}\end{aligned}</script><p>   这部分内容就是搬运了书上的公式，有几点说明:</p><ol><li>注意这里$E(\gamma_{jk}|y,\theta)$，记为$\hat\gamma_{jk}$， 对应了E步求的<strong>期望</strong>中的一部分。</li><li>对应理解一下上面公式中的红色，蓝色和绿色部分，以及$\hat\gamma_{jk}$中红色和绿色的对应关系</li><li>这里用到了$n_k=\sum_{j=1}^N\gamma_{jk}$</li><li>$\hat \gamma_{jk}$为分模型$k$对观测数据$y_j$的响应度。这里，紫色标记的第一行参考伯努利分布的期望。</li></ol><script type="math/tex; mode=display">Q(\theta,\theta^{(i)})=\sum_{k=1}^Kn_k\log \alpha_k+\sum_{j=1}^N\hat \gamma_{jk}\left[\log \left(\frac{1}{\sqrt{2\pi}}\right)-\log \sigma_k-\frac{1}{2\sigma_k^2}(y_j-\mu_k)^2\right]</script><p>其中$i$表示第$i$步迭代</p><ol><li>写出$Q$ 函数在推导的时候有用，但是在程序计算的时候，E步需要计算的就是$\hat\gamma_{jk}$，M步用到了这个结果。其实抄公式没有什么意义，主要是能放慢看公式的速度。和图表一样，公式简洁的表达了很多信息，公式中也许更能体会到数学之美。</li></ol><h5 id="3-M步-1"><a href="#3-M步-1" class="headerlink" title="3. M步"></a>3. M步</h5><p>求函数$Q(\theta,\theta^{(i)})$对$\theta$的极大值，分别求$\sigma, \mu, \alpha$</p><script type="math/tex; mode=display">\theta^{(i+1)}=\arg\max_\theta Q(\theta,\theta^{(i)})</script><ul><li>$\arg\max$ 就是求Q的极值对应的参数$\theta$，如说是离散的，遍历所有值，最大查找，如果是连续的，偏导为零求极值。</li><li>$\frac {\partial Q}{\partial \mu_k}=0, \frac {\partial{Q}}{\partial{\sigma^2}}= 0$  得到$\hat\mu_k, \hat \sigma_k^2$</li><li>$\sum_{k=1}^K\alpha_k=1, \frac{\partial{Q}}{\partial{\alpha_k}}=0$ 得到$\alpha_k$</li></ul><h5 id="4-停止条件"><a href="#4-停止条件" class="headerlink" title="4. 停止条件"></a>4. 停止条件</h5><p>重复以上计算，直到对数似然函数值不再有明显的变化为止。</p><h4 id="算法9-2"><a href="#算法9-2" class="headerlink" title="算法9.2"></a>算法9.2</h4><p>这部分摘要总结了前面的公式。</p><p>因为公式比较集中，方便对比，注意体会以下两个方面:</p><ol><li>这几个公式中待求的变量的维度和角标的关系。</li><li>这里面有求和，前面提到过要注意体会每一步刷的是模型，还是样本</li></ol><h4 id="GMM在CV中的应用"><a href="#GMM在CV中的应用" class="headerlink" title="GMM在CV中的应用"></a>GMM在CV中的应用</h4><p>其实CV中用到了很多统计的方法，GMM在GrabCut方法中用于前景和背景建模。</p><h3 id="Kmeans"><a href="#Kmeans" class="headerlink" title="Kmeans"></a>Kmeans</h3><p>另外，直觉上看，GMM最直观的想法就是Kmeans，那么:</p><ol><li>在Kmeans常见的描述中都有距离的概念，对应在算法9.2 的描述中，该如何理解?<br>这里面距离对应了方差，二范数平方。</li><li>那么又是怎么在每轮刷过距离之后，重新划分样本的分类呢?<br>这里对应了响应度，响应度对应了一个$j \times k$的矩阵，记录了每一个$y_j$ 对第$k$个模型的响应度，可以理解为划分了类别。</li></ol><h4 id="K怎么定"><a href="#K怎么定" class="headerlink" title="K怎么定"></a>K怎么定</h4><ul><li>手肘法</li><li>Gap Statistics<sup><a href="#fn_1" id="reffn_1">1</a></sup></li></ul><h3 id="广义期望极大"><a href="#广义期望极大" class="headerlink" title="广义期望极大"></a>广义期望极大</h3><p>广义期望极大(generalized expectation maximization, $GEM$)</p><p>广义期望极大是为了解决什么问题？</p><p>看名字是为了通用解决方案吧</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="习题9-3"><a href="#习题9-3" class="headerlink" title="习题9.3"></a>习题9.3</h3><p>GMM模型的参数($\alpha _k, \mu _k, \sigma^2_k $)应该是$3k$个，题目9.3中提出两个分量的高斯混合模型的5个参数，是因为参数$\alpha_k$满足$\sum_{k=1}^K\alpha _k=1$</p><h3 id="习题9-4"><a href="#习题9-4" class="headerlink" title="习题9.4"></a>习题9.4</h3><p>EM算法用到朴素贝叶斯的非监督学习，就是说没有标注的数据。    </p><p>这个题目可以参考<a href="https://ttic.uchicago.edu/~suriya/website-intromlss2018/course_material/Day10a.pdf" target="_blank" rel="noopener">https://ttic.uchicago.edu/~suriya/website-intromlss2018/course_material/Day10a.pdf</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><blockquote id="fn_3"><sup>3</sup>. <a href="-">Maximum-likelihood from incomplete data via the EM algorithm</a><a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote></li><li><p><a href="https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm" target="_blank" rel="noopener">EM Algorithm</a></p></li><li><p><a href="http://scikit-learn.org/stable/modules/mixture.html" target="_blank" rel="noopener">Sklearn Gaussian Mixed Model</a></p></li><li><blockquote id="fn_1"><sup>1</sup>. <a href="https://web.stanford.edu/~hastie/Papers/gap.pdf" target="_blank" rel="noopener">Gap Statistics</a><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_2"><sup>2</sup>. <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%85%83%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83" target="_blank" rel="noopener">多元正态分布</a><a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote></li><li><p><a href="[https://mml-book.com](https://mml-book.com/">mml</a>)</p></li><li><blockquote id="fn_3 "><sup>3 </sup>. <a href="https://www.quora.com/What-is-the-difference-between-probability-and-likelihood-1/answer/Jason-Eisner" target="_blank" rel="noopener">probability and likelihood</a><a href="#reffn_3 " title="Jump back to footnote [3 ] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_4"><sup>4</sup>. <a href="https://en.wikipedia.org/wiki/Convex_combination" target="_blank" rel="noopener">Convex Combination</a><a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote></li></ol><p><strong><a href="#导读">⬆ top</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高斯混合模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guestbook</title>
      <link href="/2020/06/14/guestbook/"/>
      <url>/2020/06/14/guestbook/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EfficientNet</title>
      <link href="/2020/06/14/Efficienet/"/>
      <url>/2020/06/14/Efficienet/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是EfficientNet"><a href="#什么是EfficientNet" class="headerlink" title="什么是EfficientNet"></a>什么是EfficientNet</h3><p><strong>EfficientNet</strong>的设想就是能否设计一个标准化的卷积网络扩展方法，既可以实现较高的准确率，又可以充分的节省算力资源。因而问题可以描述成，如何平衡分辨率、深度和宽度这三个维度，来实现网络在效率和准确率上的优化</p><h3 id="复合模型缩放法-compound-scaling-methd"><a href="#复合模型缩放法-compound-scaling-methd" class="headerlink" title="复合模型缩放法(compound scaling methd)"></a>复合模型缩放法(compound scaling methd)</h3><p>谷歌给出的调整方法，以此来实现三个维度上的平衡，让网络的准确率最大化</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-edab12a4a9bc1f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><a id="more"></a><blockquote><p>在上图中，(a)模型为baseline，(b)-(d)在(a)的基础上分别进行了单一维度的调整，而(e)则同时对三个维度同时进行了一定的调整</p></blockquote><h4 id="把扩展转化为数学问题进行描述"><a href="#把扩展转化为数学问题进行描述" class="headerlink" title="把扩展转化为数学问题进行描述"></a>把扩展转化为数学问题进行描述</h4><p>首先，我们把整个卷积网络称为N，他的第i个卷积层可以看作下面的函数映射：</p><script type="math/tex; mode=display">Y_i = F_i(X_i)</script><p>Y_i是输出张量，X_i是输入张量，假设这个X_i的维度是<Hi,Wi,Ci></Hi,Wi,Ci></p><p>最后，我们可以把讲卷积网络N定义为：</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-c10c34d08d241586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其中，下表1…s表示stage的讯号，F_i表示对第i层的卷积运算，L_i的意思是F_i在第i个stage中有Li个一样结构的卷积层。<Hi, wi, ci>表示第i层输入的shape。</Hi,></p><p>为了减小搜索空间，作者先固定了网络的基本结构，而只改变上面公式中的三个缩放维度</p><ul><li>L_i就是网络的深度</li><li>C_i就是通道数，既网络的宽度</li><li>H_i,W_i是分辨率</li></ul><p>就算如此，这也有三个参数要调整，搜索空间也是非常的大，因此EfficientNet的设想是<strong>一个卷积网络所有的卷积层必须通过相同的比例常数进行统一扩展</strong>，这句话的意思是，三个参数乘上常数倍率。所以个一个模型的扩展问题，可以转化为一个<strong>规划问题</strong>：</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-0be7e5715fe069cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其中，优化的目标为模型的准确率，而约束条件为计算资源。这个算式表现为在给定计算内存和效率的约束下，如何优化参数d、w和r来实现最好的模型准确率。</p><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><p>对于需要调整的三个维度：</p><ul><li><p><strong>Depth</strong>: The intuition is that deeperConvNet can capture richer and more complex features, and</p><p>generalize well on new tasks.</p></li><li><p><strong>Width</strong>: wider networks tend to be able to capture more fine-grained features and are easier to train.</p></li><li><p><strong>Resolution</strong>: With higher resolution input images, ConvNets can potentially capture more fine-grained patterns.</p></li></ul><ol><li>第一个实验，对三个维度固定了两个，只缩放其中一个，得到结果如下：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/16364886-48bc4215eca20d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>结论：三个维度中任一维度的放大都可以带来精度的提升，但是随着倍率的越来越大，提升越来越小。</strong></p><ol><li>第二个实验，尝试在不同的d，r组合下变动w，得到下图：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/16364886-4a482053bea62586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>从实验结果来看，最高精度相比之前已经有所提升，而且组合不同，效果不同。作者又得到了一个观点：得到了更高的精度以及效率的关键是<strong>平衡网络的宽度，网络深度，网络分辨率三个维度的缩放倍率</strong></p><p>之后，作者提出了<strong>模型复合缩放方法</strong>：</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-cb51ce8fa5da72d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>考虑到如果网络深度翻番那么对应的计算量翻倍，网络宽度和图像分辨率翻番对应的计算量会翻4倍，卷积操作的计算量与d,w^2, r^2 成正比。在这个约束下，网络的计算量大约是之前的2^ϕ 倍.</p><h3 id="EfficientNet的网络结构"><a href="#EfficientNet的网络结构" class="headerlink" title="EfficientNet的网络结构"></a>EfficientNet的网络结构</h3><p>EfficientNet使用了MobileNet V2中的<strong>MBCConv</strong>作为模型的主干网络，同时也是用了SENet中的<strong>squeeze and excitation</strong>方法对网络结构进行了优化。</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-75c0d005d95f50e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>对于EfficientNet-B0这样的一个基线网络，如何使用复合扩展发对该网络进行扩展呢？主要就是分两步走：</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-cc931ccaea3c1923.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后，作者便由此扩展出了一系列的网络结构，如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/16364886-3dfb8124f93c8f52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>而对于普通人来说做扩展的代价过于昂贵，所以最好的方法便是进行迁移学习</p><h4 id="迁移学习和finetune的区别"><a href="#迁移学习和finetune的区别" class="headerlink" title="迁移学习和finetune的区别"></a>迁移学习和finetune的区别</h4><ul><li><strong>finetune：</strong>我们假设在Resnet101后面加上一个全连接层，然后我们锁住前面Resnet的参数，不参加梯度更新，然后只更新最后一个全连接层的参数。当全连接层的loss足够小的时候，再释放所有的参数一起训练。这样Resnet的参数也会微微调整，这就是finetune；</li><li><strong>迁移学习：</strong>就不再训练之前的网络，而是把之前网络的输出的特征看作为我们自己网络的输入特征而已，而不再是一个要训练的网络的概念</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
