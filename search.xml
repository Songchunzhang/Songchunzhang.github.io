<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>变分推断</title>
      <link href="/2020/07/29/%E5%8F%98%E5%88%86%E6%8E%A8%E6%96%AD/"/>
      <url>/2020/07/29/%E5%8F%98%E5%88%86%E6%8E%A8%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>我们已经知道概率模型可以分为，频率派的优化问题和贝叶斯派的积分问题。从贝叶斯角度来看推断，对于 $\hat{x}$ 这样的新样本，需要得到：</p><script type="math/tex; mode=display">p(\hat{x}|X)=\int_\theta p(\hat{x},\theta|X)d\theta=\int_\theta p(\theta|X)p(\hat{x}|\theta,X)d\theta</script><p>如果新样本和数据集独立，那么推断就是概率分布依参数后验分布的期望。</p><p>我们看到，推断问题的中心是参数后验分布的求解，推断分为：</p><ol><li>精确推断</li><li>近似推断-参数空间无法精确求解<ol><li>确定性近似-如变分推断</li><li>随机近似-如 MCMC，MH，Gibbs</li></ol></li></ol><a id="more"></a><h2 id="基于平均场假设的变分推断"><a href="#基于平均场假设的变分推断" class="headerlink" title="基于平均场假设的变分推断"></a>基于平均场假设的变分推断</h2><p>我们记 $Z$ 为隐变量和参数的集合，$Z_i$ 为第 $i$ 维的参数，于是，回顾一下 EM 中的推导：</p><script type="math/tex; mode=display">\log p(X)=\log p(X,Z)-\log p(Z|X)=\log\frac{p(X,Z)}{q(Z)}-\log\frac{p(Z|X)}{q(Z)}</script><p>左右两边分别积分：</p><script type="math/tex; mode=display">Left:\int_Zq(Z)\log p(X)dZ=\log p(X)\\Right:\int_Z[\log \frac{p(X,Z)}{q(Z)}-\log \frac{p(Z|X)}{q(Z)}]q(Z)dZ=ELBO+KL(q,p)</script><p>第二个式子可以写为变分和 KL 散度的和：</p><script type="math/tex; mode=display">L(q)+KL(q,p)</script><p>由于这个式子是常数，于是寻找 $q\simeq p$ 就相当于对 $L(q)$ 最大值。</p><script type="math/tex; mode=display">\hat{q}(Z)=\mathop{argmax}_{q(Z)}L(q)</script><p>假设 $q(Z)$ 可以划分为 $M$ 个组（平均场近似）：</p><script type="math/tex; mode=display">q(Z)=\prod\limits_{i=1}^Mq_i(Z_i)</script><p>因此，在 $L(q)=\int_Zq(Z)\log p(X,Z)dZ-\int_Zq(Z)\log{q(Z)}$ 中，看 $p(Z_j)$ ，第一项：</p><script type="math/tex; mode=display">\begin{align}\int_Zq(Z)\log p(X,Z)dZ&=\int_Z\prod\limits_{i=1}^Mq_i(Z_i)\log p(X,Z)dZ\nonumber\\&=\int_{Z_j}q_j(Z_j)\int_{Z-Z_{j}}\prod\limits_{i\ne j}q_i(Z_i)\log p(X,Z)dZ\nonumber\\&=\int_{Z_j}q_j(Z_j)\mathbb{E}_{\prod\limits_{i\ne j}q_i(Z_i)}[\log p(X,Z)]dZ_j\end{align}</script><p>第二项：</p><script type="math/tex; mode=display">\int_Zq(Z)\log q(Z)dZ=\int_Z\prod\limits_{i=1}^Mq_i(Z_i)\sum\limits_{i=1}^M\log q_i(Z_i)dZ</script><p>展开求和项第一项为：</p><script type="math/tex; mode=display">\int_Z\prod\limits_{i=1}^Mq_i(Z_i)\log q_1(Z_1)dZ=\int_{Z_1}q_1(Z_1)\log q_1(Z_1)dZ_1</script><p>所以：</p><script type="math/tex; mode=display">\int_Zq(Z)\log q(Z)dZ=\sum\limits_{i=1}^M\int_{Z_i}q_i(Z_i)\log q_i(Z_i)dZ_i=\int_{Z_j}q_j(Z_j)\log q_j(Z_j)dZ_j+Const</script><p>两项相减，令 $\mathbb{E}_{\prod\limits_{i\ne j}q_i(Z_i)}[\log p(X,Z)]=\log \hat{p}(X,Z_j)$ 可以得到：</p><script type="math/tex; mode=display">-\int_{Z_j}q_j(Z_j)\log\frac{q_j(Z_j)}{\hat{p}(X,Z_j)}dZ_j\le 0</script><p>于是最大的 $q_j(Z_j)=\hat{p}(X,Z_j)$ 才能得到最大值。我们看到，对每一个 $q_j$，都是固定其余的 $q_i$，求这个值，于是可以使用坐标上升的方法进行迭代求解，上面的推导针对单个样本，但是对数据集也是适用的。</p><p>基于平均场假设的变分推断存在一些问题：</p><ol><li>假设太强，$Z$ 非常复杂的情况下，假设不适用</li><li>期望中的积分，可能无法计算</li></ol><h2 id="SGVI"><a href="#SGVI" class="headerlink" title="SGVI"></a>SGVI</h2><p>从 $Z$ 到 $X$ 的过程叫做生成过程或译码，反过来的额过程叫推断过程或编码过程，基于平均场的变分推断可以导出坐标上升的算法，但是这个假设在一些情况下假设太强，同时积分也不一定能算。我们知道，优化方法除了坐标上升，还有梯度上升的方式，我们希望通过梯度上升来得到变分推断的另一种算法。</p><p>我们的目标函数：</p><script type="math/tex; mode=display">\hat{q}(Z)=\mathop{argmax}_{q(Z)}L(q)</script><p>假定 $q(Z)=q_\phi(Z)$，是和 $\phi$ 这个参数相连的概率分布。于是 $\mathop{argmax}_{q(Z)}L(q)=\mathop{argmax}_{\phi}L(\phi)$，其中 $L(\phi)=\mathbb{E}_{q_\phi}[\log p_\theta(x^i,z)-\log q_\phi(z)]$，这里 $x^i$ 表示第 $i$ 个样本。</p><script type="math/tex; mode=display">\begin{align}\nabla_\phi L(\phi)&=\nabla_\phi\mathbb{E}_{q_\phi}[\log p_\theta(x^i,z)-\log q_\phi(z)]\nonumber\\&=\nabla_\phi\int q_\phi(z)[\log p_\theta(x^i,z)-\log q_\phi(z)]dz\nonumber\\&=\int\nabla_\phi q_\phi(z)[\log p_\theta(x^i,z)-\log q_\phi(z)]dz+\int q_\phi(z)\nabla_\phi [\log p_\theta(x^i,z)-\log q_\phi(z)]dz\nonumber\\&=\int\nabla_\phi q_\phi(z)[\log p_\theta(x^i,z)-\log q_\phi(z)]dz-\int q_\phi(z)\nabla_\phi \log q_\phi(z)dz\nonumber\\&=\int\nabla_\phi q_\phi(z)[\log p_\theta(x^i,z)-\log q_\phi(z)]dz-\int \nabla_\phi q_\phi(z)dz\nonumber\\&=\int\nabla_\phi q_\phi(z)[\log p_\theta(x^i,z)-\log q_\phi(z)]dz\nonumber\\&=\int q_\phi(\nabla_\phi\log q_\phi)(\log p_\theta(x^i,z)-\log q_\phi(z))dz\nonumber\\&=\mathbb{E}_{q_\phi}[(\nabla_\phi\log q_\phi)(\log p_\theta(x^i,z)-\log q_\phi(z))]\end{align}</script><p>这个期望可以通过蒙特卡洛采样来近似，从而得到梯度，然后利用梯度上升的方法来得到参数：</p><script type="math/tex; mode=display">z^l\sim q_\phi(z)\\\mathbb{E}_{q_\phi}[(\nabla_\phi\log q_\phi)(\log p_\theta(x^i,z)-\log q_\phi(z))]\sim \frac{1}{L}\sum\limits_{l=1}^L(\nabla_\phi\log q_\phi)(\log p_\theta(x^i,z)-\log q_\phi(z))</script><p>但是由于求和符号中存在一个对数项，于是直接采样的方差很大，需要采样的样本非常多。为了解决方差太大的问题，我们采用 Reparameterization 的技巧。</p><p>考虑：</p><script type="math/tex; mode=display">\nabla_\phi L(\phi)=\nabla_\phi\mathbb{E}_{q_\phi}[\log p_\theta(x^i,z)-\log q_\phi(z)]</script><p>我们取：$z=g_\phi(\varepsilon,x^i),\varepsilon\sim p(\varepsilon)$，于是对后验：$z\sim q_\phi(z|x^i)$，有 $|q_\phi(z|x^i)dz|=|p(\varepsilon)d\varepsilon|$。代入上面的梯度中：</p><script type="math/tex; mode=display">\begin{align}\nabla_\phi L(\phi)&=\nabla_\phi\mathbb{E}_{q_\phi}[\log p_\theta(x^i,z)-\log q_\phi(z)]\nonumber\\&=\nabla_\phi L(\phi)=\nabla_\phi\int[\log p_\theta(x^i,z)-\log q_\phi(z)]q_\phi dz\nonumber\\&=\nabla_\phi\int[\log p_\theta(x^i,z)-\log q_\phi(z)]p_\varepsilon d\varepsilon\nonumber\\&=\mathbb{E}_{p(\varepsilon)}[\nabla_\phi[\log p_\theta(x^i,z)-\log q_\phi(z)]]\nonumber\\&=\mathbb{E}_{p(\varepsilon)}[\nabla_z[\log p_\theta(x^i,z)-\log q_\phi(z)]\nabla_\phi z]\nonumber\\&=\mathbb{E}_{p(\varepsilon)}[\nabla_z[\log p_\theta(x^i,z)-\log q_\phi(z)]\nabla_\phi g_\phi(\varepsilon,x^i)]\end{align}</script><p>对这个式子进行蒙特卡洛采样，然后计算期望，得到梯度。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率图模型</title>
      <link href="/2020/07/29/%E6%A6%82%E7%8E%87%E5%9B%BE%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/07/29/%E6%A6%82%E7%8E%87%E5%9B%BE%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>概率图模型使用图的方式表示概率分布。为了在图中添加各种概率，首先总结一下随机变量分布的一些规则：</p><script type="math/tex; mode=display">\begin{align}&Sum\ Rule:p(x_1)=\int p(x_1,x_2)dx_2\\&Product\ Rule:p(x_1,x_2)=p(x_1|x_2)p(x_2)\\&Chain\ Rule:p(x_1,x_2,\cdots,x_p)=\prod\limits_{i=1}^pp(x_i|x_{i+1,x_{i+2} \cdots}x_p)\\&Bayesian\ Rule:p(x_1|x_2)=\frac{p(x_2|x_1)p(x_1)}{p(x_2)}\end{align}</script><p>可以看到，在链式法则中，如果数据维度特别高，那么的采样和计算非常困难，我们需要在一定程度上作出简化，在朴素贝叶斯中，作出了条件独立性假设。在 Markov 假设中，给定数据的维度是以时间顺序出现的，给定当前时间的维度，那么下一个维度与之前的维度独立。在 HMM 中，采用了齐次 Markov 假设。在 Markov 假设之上，更一般的，加入条件独立性假设，对维度划分集合 $A,B,C$，使得 $X_A\perp X_B|X_C$。</p><a id="more"></a><p>概率图模型采用图的特点表示上述的条件独立性假设，节点表示随机变量，边表示条件概率。概率图模型可以分为三大理论部分：</p><ol><li>表示：<ol><li>有向图（离散）：贝叶斯网络</li><li>高斯图（连续）：高斯贝叶斯和高斯马尔可夫网路</li><li>无向图（离散）：马尔可夫网络</li></ol></li><li>推断<ol><li>精确推断</li><li>近似推断<ol><li>确定性近似（如变分推断）</li><li>随机近似（如 MCMC）</li></ol></li></ol></li><li>学习<ol><li>参数学习<ol><li>完备数据</li><li>隐变量：E-M 算法</li></ol></li><li>结构学习</li></ol></li></ol><h2 id="有向图-贝叶斯网络"><a href="#有向图-贝叶斯网络" class="headerlink" title="有向图-贝叶斯网络"></a>有向图-贝叶斯网络</h2><p>已知联合分布中，各个随机变量之间的依赖关系，那么可以通过拓扑排序（根据依赖关系）可以获得一个有向图。而如果已知一个图，也可以直接得到联合概率分布的因子分解：</p><script type="math/tex; mode=display">p(x_1,x_2,\cdots,x_p)=\prod\limits_{i=1}^pp(x_i|x_{parent(i)})</script><p>那么实际的图中条件独立性是如何体现的呢？在局部任何三个节点，可以有三种结构：</p><ol><li><pre class="mermaid">    graph TB;    A((A))-->B((B));    B-->C((C));</pre><script type="math/tex; mode=display">p(A,B,C)=p(A)p(B|A)p(C|B)=p(A)p(B|A)p(C|B,A)\\\Longrightarrow p(C|B)=p(C|B,A)\\\Leftrightarrow p(C|B)p(A|B)=p(C|A,B)p(A|B)=p(C,A|B)\\\Longrightarrow C\perp A|B</script></li><li><pre class="mermaid">    graph TB;    B((B))-->A((A));    B-->C((C));</pre><script type="math/tex; mode=display">p(A,B,C)=p(A|B)p(B)p(C|B)=p(B)p(A|B)p(C|A,B)\\\Longrightarrow p(C|B)=p(C|B,A)\\\Leftrightarrow p(C|B)p(A|B)=p(C|A,B)p(A|B)=p(C,A|B)\\\Longrightarrow C\perp A|B</script></li><li><pre class="mermaid">    graph TB;    A((A))-->B((B));    C((C))-->B</pre><script type="math/tex; mode=display">p(A,B,C)=p(A)p(C)p(B|C,A)=p(A)p(C|A)p(B|C,A)\\\Longrightarrow p(C)=p(C|A)\\\Leftrightarrow C\perp A\\</script><p>对这种结构，$A,C$ 不与 $B$ 条件独立。</p></li></ol><p>从整体的图来看，可以引入 D 划分的概念。对于类似上面图 1和图 2的关系，引入集合A，B，那么满足 $A\perp B|C$ 的 $C$ 集合中的点与 $A,B$  中的点的关系都满足图 1，2，满足图3 关系的点都不在 $C$ 中。D 划分应用在贝叶斯定理中：</p><script type="math/tex; mode=display">p(x_i|x_{-i})=\frac{p(x)}{\int p(x)dx_{i}}=\frac{\prod\limits_{j=1}^pp(x_j|x_{parents(j)})}{\int\prod\limits_{j=1}^pp(x_j|x_{parents(j)})dx_i}</script><p>可以发现，上下部分可以分为两部分，一部分是和 $x_i$ 相关的，另一部分是和 $x_i$ 无关的，而这个无关的部分可以相互约掉。于是计算只涉及和 $x_i$ 相关的部分。</p><p>与 $x_i$ 相关的部分可以写成：</p><script type="math/tex; mode=display">p(x_i|x_{parents(i)})p(x_{child(i)}|x_i)</script><p>这些相关的部分又叫做 Markov 毯。</p><p>实际应用的模型中，对这些条件独立性作出了假设，从单一到混合，从有限到无限（时间，空间）可以分为：</p><ol><li>朴素贝叶斯，单一的条件独立性假设 $p(x|y)=\prod\limits_{i=1}^pp(x_i|y)$，在 D 划分后，所有条件依赖的集合就是单个元素。</li><li>高斯混合模型：混合的条件独立。引入多类别的隐变量 $z_1, z_2,\cdots,z_k$， $p(x|z)=\mathcal{N}(\mu,\Sigma)$，条件依赖集合为多个元素。</li><li>与时间相关的条件依赖<ol><li>Markov 链</li><li>高斯过程（无限维高斯分布）</li></ol></li><li>连续：高斯贝叶斯网络</li><li>组合上面的分类<ul><li>GMM 与时序结合：动态模型<ul><li>HMM（离散）</li><li>线性动态系统 LDS（Kalman 滤波）</li><li>粒子滤波（非高斯，非线性）</li></ul></li></ul></li></ol><h2 id="无向图-马尔可夫网络（马尔可夫随机场）"><a href="#无向图-马尔可夫网络（马尔可夫随机场）" class="headerlink" title="无向图-马尔可夫网络（马尔可夫随机场）"></a>无向图-马尔可夫网络（马尔可夫随机场）</h2><p>无向图没有了类似有向图的局部不同结构，在马尔可夫网络中，也存在 D 划分的概念。直接将条件独立的集合 $x_A\perp x_B|x_C$ 划分为三个集合。这个也叫全局 Markov。对局部的节点，$x\perp (X-Neighbour(\mathcal{x}))|Neighbour(x)$。这也叫局部 Markov。对于成对的节点：$x_i\perp x_j|x_{-i-j}$，其中 $i,j$ 不能相邻。这也叫成对 Markov。事实上上面三个点局部全局成对是相互等价的。</p><p>有了这个条件独立性的划分，还需要因子分解来实际计算。引入团的概念：</p><blockquote><p>  团，最大团：图中节点的集合，集合中的节点之间相互都是连接的叫做团，如果不能再添加节点，那么叫最大团。</p></blockquote><p>利用这个定义进行的 $x$ 所有维度的联合概率分布的因子分解为，假设有 $K$ 个团，$Z$ 就是对所有可能取值求和：</p><script type="math/tex; mode=display">\begin{align}p(x)=\frac{1}{Z}\prod\limits_{i=1}^{K}\phi(x_{ci})\\Z=\sum\limits_{x\in\mathcal{X}}\prod\limits_{i=1}^{K}\phi(x_{ci})\end{align}</script><p>其中 $\phi(x_{ci})$ 叫做势函数，它必须是一个正值，可以记为：</p><script type="math/tex; mode=display">\phi(x_{ci})=\exp(-E(x_{ci}))</script><p> 这个分布叫做 Gibbs 分布（玻尔兹曼分布）。于是也可以记为：$p(x)=\frac{1}{Z}\exp(-\sum\limits_{i=1}^KE(x_{ci}))$。这个分解和条件独立性等价（Hammesley-Clifford 定理），这个分布的形式也和指数族分布形式上相同，于是满足最大熵原理。</p><h2 id="两种图的转换-道德图"><a href="#两种图的转换-道德图" class="headerlink" title="两种图的转换-道德图"></a>两种图的转换-道德图</h2><p>我们常常想将有向图转为无向图，从而应用更一般的表达式。</p><ol><li><p>链式：</p><pre class="mermaid">    graph TB;    A((A))-->B((B));    B-->C((C));</pre><p>直接去掉箭头，$p(a,b,c)=p(a)p(b|a)p(c|b)=\phi(a,b)\phi(b,c)$：</p><pre class="mermaid">    graph TB;    A((A))---B((B));    B---C((C));</pre></li><li><p>V 形：</p><pre class="mermaid">    graph TB;    B((B))-->A((A));    B-->C((C));</pre><p>由于 $p(a,b,c)=p(b)p(a|b)p(c|b)=\phi(a,b)\phi(b,c)$，直接去掉箭头：</p><pre class="mermaid">    graph TB;    B((B))---A((A));    B---C((C));</pre></li><li><p>倒 V 形：</p><pre class="mermaid">    graph TB;    A((A))-->B((B));    C((C))-->B</pre><p>由于 $p(a,b,c)=p(a)p(c)p(b|a,c)=\phi(a,b,c)$，于是在 $a,c$ 之间添加线：</p><pre class="mermaid">    graph TD;    a((a))---b((b));    b---c((c));    a---c;</pre><p>观察着三种情况可以概括为：</p><ol><li>将每个节点的父节点两两相连</li><li>将有向边替换为无向边</li></ol></li></ol><h2 id="更精细的分解-因子图"><a href="#更精细的分解-因子图" class="headerlink" title="更精细的分解-因子图"></a>更精细的分解-因子图</h2><p>对于一个有向图，可以通过引入环的方式，可以将其转换为无向图（Tree-like graph），这个图就叫做道德图。但是我们上面的 BP 算法只对无环图有效，通过因子图可以变为无环图。</p><p>考虑一个无向图：</p><pre class="mermaid">graph TD;    a((a))---b((b));    b---c((c));    a---c;</pre><p>可以将其转为：</p><pre class="mermaid">graph TD;    a((a))---f;    f---b((b));    f---c((c))</pre><p>其中 $f=f(a,b,c)$。因子图不是唯一的，这是由于因式分解本身就对应一个特殊的因子图，将因式分解：$p(x)=\prod\limits_{s}f_s(x_s)$ 可以进一步分解得到因子图。</p><h2 id="推断"><a href="#推断" class="headerlink" title="推断"></a>推断</h2><p>推断的主要目的是求各种概率分布，包括边缘概率，条件概率，以及使用 MAP 来求得参数。通常推断可以分为：</p><ol><li>精确推断<ol><li>Variable Elimination(VE)</li><li>Belief Propagation(BP, Sum-Product Algo)，从 VE 发展而来</li><li>Junction Tree，上面两种在树结构上应用，Junction Tree 在图结构上应用</li></ol></li><li>近似推断<ol><li>Loop Belief Propagation（针对有环图）</li><li>Mente Carlo Interference：例如 Importance Sampling，MCMC</li><li>Variational Inference</li></ol></li></ol><h3 id="推断-变量消除（VE）"><a href="#推断-变量消除（VE）" class="headerlink" title="推断-变量消除（VE）"></a>推断-变量消除（VE）</h3><p>变量消除的方法是在求解概率分布的时候，将相关的条件概率先行求和或积分，从而一步步地消除变量，例如在马尔可夫链中：</p><pre class="mermaid">graph LR;    a((a))-->b((b));    b-->c((c));    c-->d((d))</pre><script type="math/tex; mode=display">p(d)=\sum\limits_{a,b,c}p(a,b,c,d)=\sum\limits_cp(d|c)\sum\limits_bp(c|b)\sum\limits_ap(b|a)p(a)</script><p>变量消除的缺点很明显：</p><ol><li>计算步骤无法存储</li><li>消除的最优次序是一个 NP-hard 问题</li></ol><h3 id="推断-信念传播（BP）"><a href="#推断-信念传播（BP）" class="headerlink" title="推断-信念传播（BP）"></a>推断-信念传播（BP）</h3><p>为了克服 VE 的第一个缺陷-计算步骤无法存储。我们进一步地对上面的马尔可夫链进行观察：</p><pre class="mermaid">graph LR;    a((a))-->b((b));    b-->c((c));    c-->d((d));    d-->e((e));</pre><p>要求 $p(e)$，当然使用 VE，从 $a$ 一直消除到 $d$，记 $\sum\limits_ap(a)p(b|a)=m_{a\to b(b)}$，表示这是消除 $a$ 后的关于 $b$ 的概率，类似地，记 $\sum\limits_bp(c|b)m_{a\to b}(b)=m_{b\to c}(c)$。于是 $p(e)=\sum\limits_dp(e|d)m_{b\to c}(c)$。进一步观察，对 $p(c)$：</p><script type="math/tex; mode=display">p(c)=[\sum\limits_bp(c|b)\sum\limits_ap(b|a)p(a)]\cdot[\sum\limits_dp(d|c)\sum\limits_ep(e)p(e|d)]</script><p>我们发现了和上面计算 $p(e)$ 类似的结构，这个式子可以分成两个部分，一部分是从 $a$ 传播过来的概率，第二部分是从 $ e$ 传播过来的概率。</p><p>一般地，对于图（只对树形状的图）：</p><pre class="mermaid">graph TD;    a((a))---b((b));    b---c((c));    b---d((d));</pre><p>这四个团（对于无向图是团，对于有向图就是概率为除了根的节点为1），有四个节点，三个边：</p><script type="math/tex; mode=display">p(a,b,c,d)=\frac{1}{Z}\phi_a(a)\phi_b(b)\phi_c(c)\phi_d(d)\cdot\phi_{ab}(a,b)\phi_{bc}(c,b)\phi_{bd}(d,b)</script><p>套用上面关于有向图的观察，如果求解边缘概率 $p(a)$，定义 $m_{c\to b}(b)=\sum\limits_c\phi_c(c)\phi_{bc}(bc)$，$m_{d\to b}(b)=\sum\limits_d\phi_d(d)\phi_{bd}(bd)$，$m_{b\to a}(a)=\sum\limits_b\phi_{ba}(ba)\phi_b(b)m_{c\to b}(b)_{d\to b}m(b)$，这样概率就一步步地传播到了 $a$：</p><script type="math/tex; mode=display">p(a)=\phi_a(a)m_{b\to a}(a)</script><p>写成一般的形式，对于相邻节点 $i,j$：</p><script type="math/tex; mode=display">m_{j\to i}(i)=\sum\limits_j\phi_j(j)\phi_{ij}(ij)\prod\limits_{k\in Neighbour(j)-i}m_{k\to j}(j)</script><p>这个表达式，就可以保存计算过程了，只要对每条边的传播分别计算，对于一个无向树形图可以递归并行实现：</p><ol><li>任取一个节点 $a$ 作为根节点</li><li>对这个根节点的邻居中的每一个节点，收集信息（计算入信息）</li><li>对根节点的邻居，分发信息（计算出信息）</li></ol><h3 id="推断-Max-Product-算法"><a href="#推断-Max-Product-算法" class="headerlink" title="推断-Max-Product 算法"></a>推断-Max-Product 算法</h3><p>在推断任务中，MAP 也是常常需要的，MAP 的目的是寻找最佳参数：</p><script type="math/tex; mode=display">(\hat{a},\hat{b},\hat{c},\hat{d})=\mathop{argmax}_{a,b,c,d}p(a,b,c,d|E)</script><p>类似 BP，我们采用信息传递的方式来求得最优参数，不同的是，我们在所有信息传递中，传递的是最大化参数的概率，而不是将所有可能求和：</p><script type="math/tex; mode=display">m_{j\to i}=\max\limits_{j}\phi_j\phi_{ij}\prod\limits_{k\in Neighbour(j)-i}m_{k\to j}</script><p>于是对于上面的图：</p><script type="math/tex; mode=display">\max_a p(a,b,c,d)=\max_a\phi_a\phi_{ab}m_{c\to b}m_{d\to b}</script><p>这个算法是 Sum-Product 算法的改进，也是在 HMM 中应用给的 Viterbi 算法的推广。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率图模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>偏微分方程数值解</title>
      <link href="/2020/06/22/%E5%81%8F%E5%BE%AE%E5%88%86/"/>
      <url>/2020/06/22/%E5%81%8F%E5%BE%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>抛物方程的有限差分方法<ul><li>冯诺依曼分析法<ul><li>追赶法</li></ul></li><li>Crank-Nicolson方法<ul><li>边界条件</li></ul></li></ul></li></ul><a id="more"></a><h3 id="抛物型方程的有限差分方法"><a href="#抛物型方程的有限差分方法" class="headerlink" title="抛物型方程的有限差分方法"></a>抛物型方程的有限差分方法</h3><p>最为常见的抛物型偏微分方程就是热传导方程</p><script type="math/tex; mode=display">\left\{\begin{array}{ll}u_{t}=Du_{x x}, & a \leqslant x \leqslant b \quad t \geqslant 0 \\u(x, 0)=f(x), & a \leqslant x \leqslant b \\u(a, t)=l(t), & t \geqslant 0 \\u(b, t)=r(t), & t \geqslant 0\end{array}\right.</script><p>它本质上其实是一个初边值问题，直观来看是因为，它既需要初值条件，又需要边值条件。<br>对于偏导数的差分格式，一般分为隐式差分与显式差分两种，下面分别进行介绍。</p><h4 id="显式差分格式"><a href="#显式差分格式" class="headerlink" title="显式差分格式"></a>显式差分格式</h4><p>对于u的一阶导数，可以进行如下的近似：</p><script type="math/tex; mode=display">\frac{u_{n+1}-u_{n}}{h} \simeq u^{\prime}</script><p>其中，$h$为设定的空间步长。如果设定h为单位长度，则</p><script type="math/tex; mode=display">u^{\prime}=\nabla u_{n+1}=u_{n+1}-u_{n}</script><p>其中，$\nabla$是后向差分的符号，而不是梯度运算。<br>由此进而可以推导出$u’’$的表达式为：</p><script type="math/tex; mode=display">u^{\prime \prime}=\nabla u_{n+1}-\nabla u_{n}=u_{n+1}-2 u_{n}+u_{n-1}</script><p>然后，再将$h$代回，便可得到最终的差分格式：</p><script type="math/tex; mode=display">u_{x x}(x, t) \approx \frac{1}{h^{2}}(u(x+h, t)-2 u(x, t)+u(x-h, t))</script><p>该式子中均是对空间的差分，所以$t$并没有变化。<br>在对于时间的差分中，我们便有两种不同的选择，这也对应了显式和隐式差分格式。<br>对于显式差分，其时间的差分方式如下：</p><script type="math/tex; mode=display">u_{t}(x, t) \approx \frac{1}{k}(u(x, t+k)-u(x, t))</script><p>其中，$k$为设定的时间步长。可以引入变量$\sigma = \frac{ck}{h^2}$<br>我们定义$w_{i,j}$就是在$(x,t)$处的<strong>数值解</strong>，那么自然的，我们可以将它按照时间的顺序排列，得到下面的一个形式:</p><script type="math/tex; mode=display">w_{i, j+1}=w_{i j}+\sigma\left(w_{i+1, j}-2 w_{i j}+w_{i-1, j}\right)</script><h4 id="冯诺依曼分析法"><a href="#冯诺依曼分析法" class="headerlink" title="冯诺依曼分析法"></a>冯诺依曼分析法</h4><p>它可以应用在各种常见的偏微分方程中。所谓的冯诺依曼分析法，其本质就是用向量，将所有的空间离散点拼起来。那么这样的话，这个矩阵所对应的表达式就仅仅与时间有关了。这样自然分析就会方便很多。<br>上述的差分形式，可以写成矩阵形式，如下：</p><script type="math/tex; mode=display">\left[\begin{array}{c}w_{1, j+1} \\\vdots \\w_{m, j+1}\end{array}\right]=\left[\begin{array}{ccccc}1-2 \sigma & \sigma & 0 & \cdots & 0 \\\sigma & 1-2 \sigma & \sigma & \ddots & \vdots \\0 & \sigma & 1-2 \sigma & \ddots & 0 \\\vdots & \ddots & \ddots & \ddots & \sigma \\0 & \cdots & 0 & \sigma & 1-2 \sigma\end{array}\right]\left[\begin{array}{c}w_{1 j} \\\vdots \\w_{m j}\end{array}\right]+\sigma\left[\begin{array}{c}w_{0, j} \\0 \\\vdots \\0 \\w_{m+1, j}\end{array}\right]</script><p>写的紧凑一点，就是公式$W_{j+1} = AW_j + s_j$,那么为了让这个公式收敛，我们显然需要让$A$的最大特征值小于1，最后一般需要$\sigma<2$ 实际的求解中，可以直接进行递推，然后对于首尾直接代入边界条件即可。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一维热传导</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment">#第三类边界条件</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="comment">#dx太小或dt太大可能出错</span></span><br><span class="line">dx = <span class="number">0.01</span></span><br><span class="line">dt = <span class="number">0.00005</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">1</span>, dx)</span><br><span class="line">t = np.arange(<span class="number">0</span>, <span class="number">1</span>, dt)</span><br><span class="line"></span><br><span class="line">u = np.zeros((len(x), len(t)))</span><br><span class="line"><span class="comment">#初始条件</span></span><br><span class="line">u[:, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment">#边界条件</span></span><br><span class="line">m1 = <span class="keyword">lambda</span> t : <span class="number">1</span> + <span class="number">0.0</span> * np.sin(t)</span><br><span class="line">m2 = <span class="keyword">lambda</span> t : <span class="number">2</span> - <span class="number">0.0</span> * np.sin(<span class="number">10</span> * t)</span><br><span class="line"><span class="comment">#构造对角矩阵1，-2，1</span></span><br><span class="line"><span class="comment">#其中diag为对角矩阵，1表示上移一格</span></span><br><span class="line">A = <span class="number">-2</span> * np.eye((len(x))) + np.diag([<span class="number">1</span>] * (len(x) - <span class="number">1</span>), <span class="number">1</span>) + np.diag([<span class="number">1</span>] * (len(x) - <span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(len(t) - <span class="number">1</span>):</span><br><span class="line">    u[:, n + <span class="number">1</span>] = u[:, n] + ((a**<span class="number">2</span> /(dx**<span class="number">2</span>)) * np.dot(A, u[:, n]) + f.T) * dt</span><br><span class="line">    <span class="comment">#第一类边界条件</span></span><br><span class="line">    <span class="comment">#用边界条件确定第一个和最后一个</span></span><br><span class="line">    u[<span class="number">0</span>, n + <span class="number">1</span>] = m1(n + <span class="number">1</span>)</span><br><span class="line">    u[<span class="number">-1</span>, n + <span class="number">1</span>] = m2(n + <span class="number">1</span>)</span><br><span class="line">figure = plt.figure()</span><br><span class="line">ax = Axes3D(figure)</span><br><span class="line">T, X = np.meshgrid(t, x)</span><br><span class="line">ax.plot_surface(X, T, u, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'t'</span>)</span><br><span class="line"><span class="comment"># plt.plot(x, u[:, -1])</span></span><br><span class="line"><span class="comment"># plt.grid()</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table><br>若得到的解出现震荡，则可以适当增加dx或减小dt，最后得到的求解结果如下图：<br><img src="/2020/06/22/%E5%81%8F%E5%BE%AE%E5%88%86/1.png" alt></2$></p><h4 id="隐式差分格式"><a href="#隐式差分格式" class="headerlink" title="隐式差分格式"></a>隐式差分格式</h4><p>与显式差分格式相比所不同的是对时间的差分格式，其差分格式如下</p><script type="math/tex; mode=display">w_{i j}-w_{i, j-1}=\sigma\left(w_{i+1, j}-2 w_{i j}+w_{i-1, j}\right)</script><p>那么也容易通过化简得到我们的矩阵方程:</p><script type="math/tex; mode=display">\left[\begin{array}{ccccc}1+2 \sigma & -\sigma & 0 & \cdots & 0 \\-\sigma & 1+2 \sigma & -\sigma & \ddots & \vdots \\0 & -\sigma & 1+2 \sigma & \ddots & 0 \\\vdots & \vdots & \vdots & \vdots & -\sigma \\0 & \cdots & 0 & -\sigma & 1+2 \sigma\end{array}\right]\left[\begin{array}{c}w_{1 j} \\\vdots \\w_{m j}\end{array}\right]=\left[\begin{array}{c}w_{1, j-1} \\\vdots \\w_{m j}-1\end{array}\right]+\sigma\left[\begin{array}{c}w_{0 j} \\0 \\\vdots \\0 \\w_{m+1, j}\end{array}\right]</script><p>写成紧凑形式便是，$Aw_j = w_{j-1}+s_j$，我们可以通过计算得到A的特征值为$1+2 \sigma-2 \sigma \cos \frac{\pi j}{m+1}&gt;1$，所以与显式差分相比该格式是<strong>无条件稳定</strong>的。但是并不能直接按时间进行递推求解，需要不断求解矩阵方程，而$A$是以三对角矩阵，较为稀疏，直接对其进行求逆会造成效率低下，于是需要利用<strong>追赶法</strong>进行求解，可以大幅提升求解效率。</p><h4 id="追赶法"><a href="#追赶法" class="headerlink" title="追赶法"></a>追赶法</h4><p>对于一矩阵方程：</p><script type="math/tex; mode=display">AX = d</script><p>其中$A$为一非奇异三对角矩阵，可以对$A$进行LU分解，得到一上三角矩阵和一下三角矩阵。之后可引入中间变量$y = UX$,则有</p><script type="math/tex; mode=display">\begin{array}{l}A x=L U x=L y=d \\L y=d\end{array}</script><p>之后已知$L,d$便可求得$y$,已知$U,y$后便可求得$X$。具体代码实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> linalg</span><br><span class="line"></span><br><span class="line"><span class="comment">#可解决大规模的三对角的矩阵方程</span></span><br><span class="line"><span class="comment">#如在偏微分方程的求解中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">b c 0 0</span></span><br><span class="line"><span class="string">a b c 0</span></span><br><span class="line"><span class="string">0 a b c</span></span><br><span class="line"><span class="string">0 0 a b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其中b的绝对值</span></span><br><span class="line"><span class="string">大于等于a与c的绝对值之和</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">A = <span class="number">-2</span> * np.eye((<span class="number">5</span>)) + np.diag([<span class="number">1</span>] * (<span class="number">5</span> - <span class="number">1</span>), <span class="number">1</span>) + np.diag([<span class="number">1</span>] * (<span class="number">5</span> - <span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># print(b[1])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Thomas</span><span class="params">(La, Mb, Uc, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        La -- [lower item for tri-diagonal matrix] -- [a, a, a]</span></span><br><span class="line"><span class="string">        Mb -- [mian item for tri-diagonal matrix] -- [b, b, b, b]</span></span><br><span class="line"><span class="string">        Uc -- [upper item for tri-diagonal matrix] -- [c, c, c]</span></span><br><span class="line"><span class="string">        b -- [AX = b, where A is the tri-diagonal matrix] [1,1,1,1,1]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(Mb)</span><br><span class="line">    Uc[<span class="number">0</span>] = Uc[<span class="number">0</span>] / Mb[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n<span class="number">-1</span>):</span><br><span class="line">        Uc[i] = Uc[i] / (Mb[i] - La[i - <span class="number">1</span>] * Uc[i - <span class="number">1</span>])</span><br><span class="line">    b[<span class="number">0</span>] = b[<span class="number">0</span>] / Mb[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">        b[i] = (b[i] - La[i<span class="number">-1</span>]*b[i<span class="number">-1</span>]) / (Mb[i] - La[i<span class="number">-1</span>] * Uc[i<span class="number">-1</span>])</span><br><span class="line">    ls = list(range(n<span class="number">-1</span>))[::<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">        b[i] = b[i] - Uc[i]*b[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><br>之后便可利用追赶法和初始条件，遍历时间节点，逐次求解每个时间点的温度。</p><h4 id="Crank-Nicolson方法"><a href="#Crank-Nicolson方法" class="headerlink" title="Crank-Nicolson方法"></a>Crank-Nicolson方法</h4><p>因为之前的两个方法它们的误差是$O(n^2+k^2)$,这其实会有问题就是主要的误差其实都在时间步长上。我们需要把时间步长 取得很小，可能才能够达到我们要的精度。因此$Crank-Nicolson$方法可以很好地弥补这个缺陷。<br>这里我们的$u_t$使用向后差分，和上面那一个一样。而我们的$u_{xx}$使用的是混合差分。具体来说，就是用:</p><script type="math/tex; mode=display">u_{xx}(i,j)=\frac{1}{h^{2}}\left(\frac{1}{2}\left(w_{i+1, j}-2 w_{i j}+w_{i-1, j}\right)+\frac{1}{2}\left(w_{i+1, j-1}-2 w_{i, j-1}+w_{i-1, j-1}\right)\right)</script><p>最后按时间进行整合后得到：</p><script type="math/tex; mode=display">-\sigma w_{i-1, j}+(2+2 \sigma) w_{i j}-\sigma w_{i+1, j}=\sigma w_{i-1, j-1}+(2-2 \sigma) w_{i, j-1}+\sigma w_{i+1, j-1}</script><p>大体上的形式就是 $A \mathbf{w}_{j}=B \mathbf{w}_{j-1}+\sigma\left(\mathbf{s}_{j-1}+\mathbf{s}_{j}\right)$<br>其中：</p><script type="math/tex; mode=display">A=\left(\begin{array}{ccccc}2+2 \sigma & -\sigma & 0 & \cdots & 0 \\-\sigma & 2+2 \sigma & -\sigma & \ddots & \vdots \\0 & -\sigma & 2+2 \sigma & \ddots & 0 \\\vdots & \ddots & \ddots & \ddots & -\sigma \\0 & \cdots & 0 & -\sigma & 2+2 \sigma\end{array}\right)</script><script type="math/tex; mode=display">B=\left(\begin{array}{ccccc}2-2 \sigma & \sigma & 0 & \cdots & 0 \\\sigma & 2-2 \sigma & \sigma & \ddots & \vdots \\0 & \sigma & 2-2 \sigma & \ddots & 0 \\\vdots & \ddots & \ddots & \ddots & \sigma \\0 & \cdots & 0 & \sigma & 2-2 \sigma\end{array}\right)</script><p>可以计算得到$A^{-1}B$的特征值为：</p><script type="math/tex; mode=display">\mu_{j}=\frac{2-2 \sigma+\sigma \lambda_{j}}{2+2 \sigma-\sigma \lambda_{j}}, \lambda_{j}=-2 \cos \pi j /(m+1)</script><p>其特征值也是小于1的，故也是无条件稳定。同时其截断误差为$O(k^2+h^2)$,这比上面两种方法的误差要小很多了</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 偏微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EM算法以及推广</title>
      <link href="/2020/06/15/EM%E7%AE%97%E6%B3%95%E5%8F%8A%E6%8E%A8%E5%B9%BF/"/>
      <url>/2020/06/15/EM%E7%AE%97%E6%B3%95%E5%8F%8A%E6%8E%A8%E5%B9%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="章节目录"><a href="#章节目录" class="headerlink" title="章节目录"></a>章节目录</h3><ol><li>EM算法的引入<ol><li>EM算法</li><li>EM算法的导出</li><li>EM算法在非监督学习中的应用</li></ol></li><li>EM算法的收敛性</li><li>EM算法在高斯混合模型学习中的应用<ol><li>高斯混合模型</li><li>高斯混合模型参数估计的EM算法</li></ol></li><li>EM算法的推广<ol><li>F函数的极大极大算法</li></ol></li></ol><a id="more"></a><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><ul><li><p><strong>概率模型</strong>有时既含有观测变量，又含有隐变量或潜在变量。这句很重要。</p></li><li><p>这章如果看三硬币有疑问，可以往后继续看，看到高斯混合模型，然后再回头理解三硬币。有不理解的地方，可以重新看对应问题的定义，重新理解各个符号的意义，因为这章开始，需要分析的问题和之前的分类问题有差异，任务不同了要理解需求。希望对学习有帮助。</p></li><li><p>EM算法可以用于<strong>生成模型</strong>的非监督学习，EM算法是个一般方法，不具有具体模型。</p><blockquote><p>EM算法是一种迭代算法，用于含有隐变量的概率模型的极大似然估计，或极大后验概率估计。</p></blockquote><p>本书<a href="../CH12/README.md">CH12</a>在对比各种模型的策略的时候，从这章开始，学习策略都是MLE，损失函数都是对数似然损失。体现了这一类问题的共性与联系。</p></li><li><p>这里面注意体会不同变量的大小以及对应的取值范围。</p></li><li><p>一个$m\times n\times k$的矩阵可能可以划分成$n$个$m\times k$的形式，这点理解下。</p></li><li><p>涉及混合模型的部分推导有很多求和，注意体会是按照<strong>样本</strong>做的，还是按照<strong>模型</strong>做的，也就是操作的域</p></li><li><p>如果对PDF，高斯分布，边缘概率分布，协方差矩阵不清楚，可以在这个章节从GMM的角度扩展阅读下，一定会有收获。</p></li><li><p>似然和概率的关系可以推广了解，这章关于概率和似然的符号表示，可能会有点看不懂，比如$P_{157}$中的部分表述。可以参考引用内容<sup><a href="#fn_3" id="reffn_3">3</a></sup>, 概率和似然是同样的形式描述的都是<strong>可能性</strong>，$P(Y|\theta)$是一个两变量的函数，似然是给定结果，求参数可能性；概率是给定参数求结果可能性。</p><blockquote><p>Suppose you have a probability model with parameters $\theta$.<br>$p(x|\theta)$ has two names.<br>It can be called the <strong>probability of $x$</strong> (given $\theta$),<br>or the <strong>likelihood of $\theta$</strong> (given that $x$  was observed).</p></blockquote></li><li><p>学习过程中注意<strong>观测数据</strong>在EM算法每次迭代中的意义。</p></li><li><p>GMM中注意区分$\alpha_k$和$\gamma_{jk}$的差异，直觉上都有一种归属的感觉，$\gamma_{jk}$是二值函数，$\alpha_k$是一种概率的表示。$\gamma_{jk}$是one-hot encoding(also: 1-of-K representation)，还有$\hat\gamma_{jk}$这个是个估计注意和$\gamma_{jk}$的关系</p></li><li><p>GMM这里面实际上还涉及到一个概念叫做凸组合(Convex Combination)<sup><a href="#fn_4" id="reffn_4">4</a></sup>，是凸几何领域的一个概念，点的线性组合，所有系数都非负且和为1。点集的凸包等价于该点集的凸组合。</p></li><li><p>无论是三硬币还是GMM，采样的过程都是如下:</p><blockquote><ol><li>Sample $z_i \sim p(z|\pi)$</li><li>Sample $x_i \sim p(x|\pi)$</li></ol></blockquote><p>注意，这里用到了$\pi$，在强化学习中，随机性策略$\pi(x,a)$表示为状态$x$下选择动作$a$的概率。</p></li><li><p>关于EM算法的解释<br>注意这里EM不是模型，是个一般方法，不具有具体的模型，这点前面已经提到</p><ol><li>PRML<br>$kmeans \rightarrow GMM \rightarrow EM$<br>所以，EM应用举例子为kmeans也OK。而且，西瓜书$P_{165}$上有说， <code>k均值聚类算法就是一个典型的EM算法</code></li><li>统计学习方法<ol><li>$MLE \rightarrow B$</li><li>$F$函数的极大-极大算法</li></ol></li></ol></li><li><p>这个repo里面实现了BMM算法和GMM算法两种混合模型</p></li><li><p>HMM也是Discrete <strong>Dynamic Model</strong>，从图模型角度考虑，可以发现HMM和卡尔曼滤波以及粒子滤波深层之间的联系。这部分内容在PRML中有讨论。</p></li><li><p>书中图9.1说一下，可以参考<a href="../CH08/README.md">CH08</a>的部分内容，关于Bregman distance的那部分说明。</p></li><li><p>HMM作了两个基本假设，实际上是在说在图模型中，存在哪些<strong>边</strong>。</p></li></ul><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><blockquote><p>一般地，用$Y$表示观测随机变量的数据，$Z$表示隐随机变量的数据。$Y$和$Z$一起称为<strong>完全数据</strong>(complete-data)，观测数据$Y$又称为<strong>不完全数据</strong>(incomplete-data)</p></blockquote><p>上面这个概念很重要，Dempster在1977年提出EM算法的时候文章题目就是《Maximum likelihood from incomplete data via the EM algorithm》，具体看书中本章参考文献<sup><a href="#fn_3" id="reffn_3">3</a></sup></p><blockquote><p>假设给定观测数据$Y$，其概率分布是$P(Y|\theta)$，其中$\theta$是需要估计的模型参数<br>那么不完全数据$Y$的似然函数是$P(Y|\theta)$，对数似然函数是$L(\theta)=\log P(Y|\theta)$</p><p>假设$Y$和$Z$的联合概率分布是$P(Y,Z|\theta)$，那么完全数据的对数似然函数是$\log P(Y,Z|\theta)$</p></blockquote><p>上面这部分简单对应一下，这里说明一下，你看到下面概率分布和似然函数形式看起来一样。在概率中，$\theta$已知, 求$Y$，在似然函数中通过已知的Y去求$\theta$观测数据$Y$</p><p>有一点要注意下, 这里没有出现$X$, 在<strong>9.1.3</strong>节中有提到一种理解</p><blockquote><ul><li>有时训练数据只有输入没有对应的输出${(x_1,\cdot),(x_2,\cdot),\dots,(x_N,\cdot)}$，从这样的数据学习模型称为非监督学习问题。</li><li>EM算法可以用于生成模型的非监督学习。</li><li>生成模型由联合概率分布$P(X,Y)$表示，可以认为非监督学习训练数据是联合概率分布产生的数据。$X$为观测数据， $Y$为未观测数据。</li></ul></blockquote><p>有时候，只观测显变量看不到关系，就需要把隐变量引进来。</p><h2 id="混合模型"><a href="#混合模型" class="headerlink" title="混合模型"></a>混合模型</h2><p>书中用三硬币模型做为引子，在学习这部分内容的时候，注意体会观测数据的作用。</p><h3 id="伯努利混合模型-三硬币模型"><a href="#伯努利混合模型-三硬币模型" class="headerlink" title="伯努利混合模型(三硬币模型)"></a>伯努利混合模型(三硬币模型)</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>书中用例子来介绍EM算法的问题，并给出了EM算法迭代求解的过程，具体例子描述见<strong>例9.1</strong>，这块如果不懂，可以跳过，看完后面高斯混合模型再回来看。</p><p>问题的描述过程中有这样一句：独立的重复$n$次实验(这里$n=10$)，观测结果如下:</p><p><code>1,1,0,1,0,0,1,0,1,1</code></p><p>思考上面这个观测和<code>1,1,1,1,1,1,0,0,0,0</code>有区别么?</p><p>没有任何信息的前提下，我们得到上面的观测数据可以假定是一个<strong>二项分布</strong>的形式，参数$n=10, p=0.6$</p><p>把$k=6$次成功分布在$n=10$次试验中有$C(10,6)$种可能.</p><p>所以上面两个观测序列，可能出自同一个模型。在这个问题的求解上是没有区别的，测试案例$test_t91$做了这个说明，可以参考。</p><p>我们通过一段代码来生成这个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np Engine</span><br><span class="line"></span><br><span class="line">p = <span class="number">0.6</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="comment"># np.random.seed(2018)</span></span><br><span class="line">flag_a = <span class="number">1</span></span><br><span class="line">flag_b = <span class="number">1</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> flag_a <span class="keyword">or</span> flag_b:</span><br><span class="line">    tmp = np.random.binomial(<span class="number">1</span>, p, n)</span><br><span class="line">    <span class="keyword">if</span> (tmp == np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])).all():</span><br><span class="line">        flag_a = <span class="number">0</span></span><br><span class="line">        print(<span class="string">"[1,1,1,1,1,1,0,0,0,0] at %d\n"</span> % cnt)</span><br><span class="line">    <span class="keyword">if</span> (tmp == np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>])).all():</span><br><span class="line">        flag_b = <span class="number">0</span></span><br><span class="line">        print(<span class="string">"[1,1,0,1,0,0,1,0,1,1] at %d\n"</span> % cnt)</span><br><span class="line">    cnt += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>实际上题目的描述中说明了观测数据生成的过程，这些参数是未知的，所以需要对这些参数进行估计。</p><p>解的过程记录在这里。</p><p>三硬币模型可以写作</p><script type="math/tex; mode=display">\begin{equation}        \begin{aligned}            P(y|\theta)&=\sum_z P(y,z|\theta) \\            &=\sum_z P(z|\theta)P(y|z,\theta) \\            &=\pi p^y (1-p)^{1-y} + (1-\pi)q^y(1-q)^{1-y}        \end{aligned}\end{equation}</script><p>以上</p><ol><li>随机变量$y$是观测变量，表示一次试验观测的结果是<strong>1或0</strong></li><li>随机变量$z$是隐变量，表示未观测到的掷硬币$A$的结果</li><li>$\theta=(\pi,p,q)$是模型参数</li><li>这个模型是<strong>以上数据</strong>(1,1,0,1,0,0,1,0,1,1)的生成模型</li></ol><p>观测数据表示为$Y=(Y_1, Y_2, Y_3, \dots, Y_n)^T$, 未观测数据表示为$Z=(Z_1,Z_2, Z_3,\dots, Z_n)^T$, 则观测数据的似然函数为</p><blockquote><p>其实觉得这里应该是小写的$y=(y_1,y_2,\dots,y_n), z=(z_1, z_2, \dots,z_n)$</p><script type="math/tex; mode=display">P(Y|\theta) = \sum\limits_{Z}P(Z|\theta)P(Y|Z,\theta)</script><p>注意这里的求和是下面的”+”描述的部分</p></blockquote><p>即</p><script type="math/tex; mode=display">P(Y|\theta)=\prod\limits^{n}_{j=1}[\pi p^{y_j}(1-p)^{1-y_j}+(1-\pi)q^{y_j}(1-q)^{1-y_j}]</script><p>注意这里连乘是$Y\rightarrow y_j$出来的, 不理解看似然定义.</p><p>考虑求模型参数$\theta=(\pi,p,q)$的极大似然估计, 即</p><script type="math/tex; mode=display">\hat \theta = \arg\max\limits_{\theta}\log P(Y|\theta)</script><p>这个题目的标准答案实际上也是未知的，因为可能生成这样的观测的假设空间太大。</p><h4 id="三硬币模型的EM算法"><a href="#三硬币模型的EM算法" class="headerlink" title="三硬币模型的EM算法"></a>三硬币模型的EM算法</h4><h5 id="1-初值"><a href="#1-初值" class="headerlink" title="1.初值"></a>1.初值</h5><p>EM算法首选参数初值，记作$\theta^{(0)}=(\pi^{(0)},p^{(0)}, q^{(0)})$, 然后迭代计算参数的估计值。</p><p>如果第$i$次迭代的模型参数估计值为$\theta^{(i)}=(\pi^{(i)}, p^{(i)}, q^{(i)})$</p><h5 id="2-E步"><a href="#2-E步" class="headerlink" title="2.E步"></a>2.E步</h5><p>那么第$i+1$ 次迭代的模型参数估计值表示为</p><script type="math/tex; mode=display">\mu_j^{i+1} = \frac{\pi^{(i)}(p^{(i)})^{y_j}(1-p^{(i)})^{1-y_j}}{\pi^{(i)}(p^{(i)})^{y_j}(1-p^{(i)})^{1-y_j} + (1-\pi^{(i)})(q^{(i)})^{y_j}(1-q^{(i)})^{1-y_j}}</script><p>因为是硬币，只有0，1两种可能，所有有上面的表达。</p><p>这个表达方式还可以拆成如下形式</p><script type="math/tex; mode=display">\mu_j^{i+1} =\begin{cases}\frac{\pi^{(i)}p^{(i)}}{\pi^{(i)}p^{(i)} + (1-\pi^{(i)})q^{(i)}}&, y_j = 1\\\frac{\pi^{(i)}(1-p^{(i)})}{\pi^{(i)}(1-p^{(i)}) + (1-\pi^{(i)})(1-q^{(i)})}&, y_j = 0\\\end{cases}</script><p>所以, 这步(求$\mu_j$)干了什么，样本起到了什么作用？</p><p> 这一步，通过假设的参数，计算了不同的样本对假设模型的响应($\mu_j$)，注意这里因为样本($y_j$)是二值的，所以，用$\{y_j, 1-y_j\}$ 构成了one-hot的编码，用来表示样本归属的假设。</p><p>以上，有点绕。</p><p>这一步是什么的期望？书中有写，<strong>观测数据来自硬币$B$的概率, 在二项分布的情况下, 响应度和概率是一个概念. </strong>这个说明，有助于后面M步公式的理解。</p><h5 id="3-M步"><a href="#3-M步" class="headerlink" title="3.M步"></a>3.M步</h5><script type="math/tex; mode=display">\begin{align}\pi^{(i+1)} &= \frac{1}{n}\sum_{j=1}^{n}\mu_j^{(i+1)}\\\color{red}p^{(i+1)} &= \frac{\sum_{j=1}^{n}\mu_j^{(i+1)}y_j}{\sum_{j=1}^{n}\mu_j^{(i+1)}}\\\color{red}q^{(i+1)} &= \frac{\sum_{j=1}^{n}(1-\mu_j^{(i+1)})y_j}{\sum_{j=1}^{n}(1-\mu_j^{(i+1)})}\end{align}</script><p>上面，红色部分的公式从<code>观测数据是来自硬币B的概率</code>这句来理解。</p><h5 id="初值影响"><a href="#初值影响" class="headerlink" title="初值影响"></a>初值影响</h5><p>这个例子里面0.5是个合理又牛逼的初值。迭代收敛的最后结果是(0.5, 0.6, 0.6)</p><p>这个结果说明，如果A是均匀的，那么一个合理的解就是B，C是同质的。他们的分布情况和观测的分布一致。</p><p>在测试案例$test_e91$中有计算这部分的结果，注意看，这种简单的模型其实收敛的很快。</p><h5 id="p-q-含义"><a href="#p-q-含义" class="headerlink" title="p,q 含义"></a>p,q 含义</h5><p>这里面p对应了A =1，B=1，q对应了A=0，C=1</p><p>这三个公式可以改写成如下形式:</p><script type="math/tex; mode=display">\begin{align}\pi^{(i+1)} &= \frac{1}{n}\sum_{j=1}^{n}\mu_j^{(i+1)}\\\color{red}p^{(i+1)} &= \frac{\sum_{j=1}^{n}\mu_j^{(i+1)}y_j}{\sum_{j=1}^{n}(\mu_j^{(i+1)}y_j+\mu_j^{(i+1)}(1-y_j)}\\\color{red}q^{(i+1)} &= \frac{\sum_{j=1}^{n}(1-\mu_j^{(i+1)})y_j}{\sum_{j=1}^{n}((1-\mu_j^{(i+1)})y_j+(1-\mu_j^{(i+1)})(1-y_j))}\end{align}</script><p>$\pi$的表达式回答这样一个问题:  刷了这么多样本，拿到一堆数，那么$\pi$应该是多少，均值十个比较好的选择。</p><p>$p$的表达式回答这样一个问题:  如果我知道每个结果$y_j$以$\mu_j$的可能来自硬币B(A=1)，那么用这些数据刷出来他可能是正面的概率。这里面$\mu_j$对应了$A=1$</p><p>$q$的表达式同理，其中$1-\mu_j$对应了$A=0$</p><p>到后面讲高斯混合模型的时候，可以重新审视这里</p><script type="math/tex; mode=display">\begin{aligned}\alpha_0& \leftrightarrow \pi \\\mu_0& \leftrightarrow p^{y_j}(1-p)^{1-y_j}\\\alpha_1& \leftrightarrow 1-\pi\\\mu_1& \leftrightarrow q^{y_j}(1-q)^{1-y_j}\end{aligned}</script><p>以上对应了包含两个分量的伯努利混合模型, BMM, 包含四个参数, 因为$\alpha_k$满足等式约束, 所以通常会有三个参数, 另外参见习题$9.3$中有提到<code>两个分量的高斯混合模型的五个参数</code>实际上也是因为等式约束.</p><p><a href="bmm.py">bmm.py</a>对伯努利混合模型做了实现, 有几点说明一下:</p><ol><li><p>$(p^{(i)})^{y_i}(1-p^{(i)})^{1-y_i}$这个表达式对应了伯努利分布的概率密度, 可以表示成矩阵乘法, 尽量不要用for, 效率会差</p></li><li><p>书中$e_{91}$的表达中, 采用了$\pi, p, q$来表示, 注意在题目的说明部分有说明三个符号的含义</p></li><li><p>实际上不怎么抛硬币, 但是0-1的伯努利分布很多, 在书中算法9.4部分, 有这样一个说明:</p><blockquote><p>当参数$\theta$的维数为$d(d\ge2 )$的时候, 可以采用一种特殊的GEM算法, 它将算法的M步分解成d次条件极大化, 每次只改变参数向量的一个分量,其余量不改变.</p></blockquote></li></ol><h3 id="EM算法另外视角"><a href="#EM算法另外视角" class="headerlink" title="EM算法另外视角"></a>EM算法另外视角</h3><blockquote><p>输入: 观测变量数据$Y$，隐变量数据$Z$，联合分布$P(Y,Z|\theta)$，条件分布$P(Z|Y,\theta)$</p><p>输出: 模型参数$\theta$</p><ol><li><p>选择参数的初值$\theta^{(0)}$，开始迭代</p></li><li><p>E步：记$\theta^{(i)}$为第 $i$ 次迭代参数$\theta$的估计值，在第$i+1$次迭代的$E$步，计算</p><script type="math/tex; mode=display">\begin{align}Q(\theta, \theta^{(i)}) =& E_Z[\log P(Y,Z|\theta)|Y,\theta^{(i)}]\\=&\sum_Z\color{red}\log P(Y,Z|\theta)\color{green}P(Z|Y, \theta^{(i)})\end{align}</script></li><li><p>M步<br>求使$Q(\theta, \theta^{(i)})$最大化的$\theta$，确定第$i+1$次迭代的参数估计值</p></li></ol><script type="math/tex; mode=display">\theta^{(i+1)}=\arg\max_\theta Q(\theta, \theta^{(i)})</script></blockquote><h4 id="Q-函数"><a href="#Q-函数" class="headerlink" title="Q 函数"></a>Q 函数</h4><p>注意Q函数的定义，可以帮助理解上面E步中的求和表达式</p><p>完全数据的<strong>对数似然函数$\log P(Y, Z|\theta)$关于</strong>给定观测数据$Y$的当前参数$\theta^{(i)}$下对为观测数据$Z$的<strong>条件概率分布$P(Z|Y,\theta^{(i)})$的期望</strong>称为Q函数。</p><h4 id="BMM的EM算法"><a href="#BMM的EM算法" class="headerlink" title="BMM的EM算法"></a>BMM的EM算法</h4><blockquote><p>输入: 观测变量数据$y_1, y_2, \dots, y_N$, 伯努利混合模型</p><p>输出: 伯努利混合模型参数</p><ol><li>选择参数的初始值开始迭代, $2K$ 个参数</li><li>E步:<script type="math/tex; mode=display">\hat\gamma_{jk}=\frac{\alpha_kBern(y_j|\theta_k)}{\sum_{k=1}^K\alpha_kBern(y_j|\theta_k)}=\frac{\alpha_k\mu_k^{y_j}(1-\mu_k)^{1-y_j}}{\sum_{k=1}^K\alpha_k\mu_k^{y_j}(1-\mu_k)^{1-y_j}}, j=1,2,\dots,N; k=1,2,\dots,K</script></li><li>M步:<script type="math/tex; mode=display">\hat\mu_k=\frac{\sum_{j=1}^N\hat\gamma_{jk}y_j}{\sum_{j=1}^N\hat\gamma_{jk}}\\\hat\alpha_k=\frac{n_k}{N}</script></li></ol></blockquote><h4 id="目标函数L"><a href="#目标函数L" class="headerlink" title="目标函数L"></a>目标函数L</h4><script type="math/tex; mode=display">L(\theta)=\log P(Y|\theta)=\log \sum_Z P(Y,Z|\theta)=\log(\sum_Z P(Y|Z,\theta)P(Z|\theta))</script><p>目标函数是不完全数据的对数似然</p><h4 id="EM算法导出"><a href="#EM算法导出" class="headerlink" title="EM算法导出"></a>EM算法导出</h4><p>书中这部分内容回答为什么EM算法能近似实现对观测数据的极大似然估计？</p><script type="math/tex; mode=display">\begin{aligned}L(\theta)-L\left(\theta^{(i)}\right) &=\log \left(\sum_{Z} P\left(Y | Z, \theta^{(i)}\right) \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Y | Z, \theta^{(i)}\right)}\right)-\log P\left(Y | \theta^{(i)}\right) \\& \geq \sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Z | Y, \theta^{(i)}\right)}-\log P\left(Y | \theta^{(i)}\right) \\&=\sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Z | Y, \theta^{(i)}\right)}-\sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log P\left(Y | \theta^{(i)}\right) \\&=\sum_{Z} P\left(Z | Y, \theta^{(i)}\right) \log \frac{P(Y | Z, \theta) P(Z | \theta)}{P\left(Z | Y, \theta^{(i)}\right) P\left(Y | \theta^{(i)}\right)}\end{aligned}</script><p>以上用于推导迭代过程中两次$L$会变大， 这里面红色部分是后加的方便理解前后两步之间的推导。绿色部分是为了构造期望， 进而应用琴声不等式。在这里凑项应该是凑$P(Z|Y,\theta^{(i)})$，书中这部分可能是笔误。</p><p>这里也写一下琴声不等式</p><script type="math/tex; mode=display">\log \sum_j \lambda_j y_j \ge \sum_j \lambda_j \log y_j, s.t., \lambda_j \ge 0, \sum_j \lambda_j = 1</script><p>所以，这里的这一项不是随便凑的。</p><p>TODO:更新下这个图</p><h3 id="高斯混合模型"><a href="#高斯混合模型" class="headerlink" title="高斯混合模型"></a>高斯混合模型</h3><p><strong>混合模型</strong>，有多种，高斯混合模型是最常用的。</p><p>高斯混合模型(Gaussian Mixture Model)是具有如下<strong>概率分布</strong>的模型:</p><script type="math/tex; mode=display">P(y|\theta)=\sum\limits^{K}_{k=1}\alpha_k\phi(y|\theta_k)</script><p>其中，$\alpha_k$是系数，$\alpha_k\ge0$，$\sum\limits^{K}_{k=1}\alpha_k=1$, $\phi(y|\theta_k)$ 是<strong>高斯分布密度</strong>，$\theta_k=(\mu,\sigma^2)$</p><script type="math/tex; mode=display">\phi(y|\theta_k)=\frac{1}{\sqrt{2\pi}\sigma_k}\exp\left(-\frac{(y-\mu_k)^2}{2\sigma_k^2}\right)</script><p>上式表示第k个<strong>分</strong>模型。</p><p>以上, 注意几点：</p><ol><li>GMM的描述是概率分布，形式上可以看成是加权求和</li><li><p>加权求和的权重$\alpha$满足$\sum_{k=1}^K\alpha_k=1$的约束</p></li><li><p>求和符号中除去权重的部分，是高斯分布密度(PDF)。高斯混合模型是一种$\sum(权重\times 分布密度)=分布$的表达<br> 高斯混合模型的参数估计是EM算法的一个重要应用，隐马尔科夫模型的非监督学习也是EM算法的一个重要应用。</p></li><li><p>书中描述的是一维的高斯混合模型，d维的形式如下<sup><a href="#fn_2" id="reffn_2">2</a></sup>，被称作多元正态分布，也叫多元高斯分布</p><script type="math/tex; mode=display">\phi(y|\theta_k)=\frac{1}{\sqrt{(2\pi)^d|\Sigma|}}\exp\left(-\frac{(y-\mu_k)^T\Sigma^{-1}(y-\mu_k)}{2}\right)</script><p>其中，协方差矩阵$\Sigma\in \R^{n\times n}$</p></li><li><p>另外，关于高斯模型的混合，还有另外一种混合的方式，沿着时间轴的方向做混合。可以理解为滤波器，典型的算法就是Kalman Filter，对应了时域与频域之间的关系，两个高斯的混合依然是高斯，混合的方法是卷积，而不是简单的加法，考虑到的是概率密度的混合，也是一种线性的加权。</p></li></ol><h4 id="GMM的EM算法"><a href="#GMM的EM算法" class="headerlink" title="GMM的EM算法"></a>GMM的EM算法</h4><p>问题描述:</p><p>已知观测数据$y_1, y_2, \dots , y_N$，由高斯混合模型生成</p><script type="math/tex; mode=display">P(y|\theta)=\sum_{k=1}^K\alpha_k\phi(y|\theta_k)</script><p>其中， $\theta=(\alpha_1,\alpha_2,\dots,\alpha_K;\theta_1,\theta_2,\dots,\theta_K)$</p><p>补充下，不完全数据的似然函数应该是</p><script type="math/tex; mode=display">\begin{align}P(y|\theta)=&\prod_{j=1}^NP(y_j|\theta)\\=&\prod_{j=1}^N\sum_{k=1}^K\alpha_k\phi(y|\theta_k)\end{align}</script><p>使用EM算法估计GMM的参数$\theta$</p><h5 id="1-明确隐变量-初值"><a href="#1-明确隐变量-初值" class="headerlink" title="1. 明确隐变量, 初值"></a>1. 明确隐变量, 初值</h5><ul><li><p>观测数据$y_j, j=1,2,\dots,N$这样产生, 是<strong>已知的</strong>:</p><ol><li>依概率$\alpha_k$<strong>选择第$k$个</strong>高斯分布分模型$\phi(y|\theta_k)$;</li><li>依第$k$个分模型的概率分布$\phi(y|\theta_k)$生成观测数据$y_j$</li><li><p>反映观测数据$y_j$来自第$k$个分模型的数据是<strong>未知的</strong>, $k=1,2,\dots,K$ 以<strong>隐变量$\gamma_{jk}$</strong>表示<br><strong>注意这里$\gamma_{jk}$的维度$(j\times k)$</strong></p><script type="math/tex; mode=display">\gamma_{jk}=\begin{cases}1, &第j个观测来自第k个分模型\\0, &否则\end{cases}\\j=1,2,\dots,N; k=1,2,\dots,K; \gamma_{jk}\in\{0,1\}</script><p>注意, 以上说明有几个假设:</p></li><li><p>隐变量和观测变量的数据对应, 每个观测数据，对应了一个隐变量，$\gamma_{jk}$是一种one-hot的形式。</p></li><li>具体的单一观测数据是混合模型中的某一个模型产生的</li></ol></li><li><p>完全数据为$(y_j,\gamma_{j1},\gamma_{j2},\dots,\gamma_{jK},k=1,2,\dots,N)$</p></li><li><p>完全数据似然函数</p><script type="math/tex; mode=display">\begin{aligned}P(y,\gamma|\theta)=&\prod_{j=1}^NP(y_j,\gamma_{j1},\gamma_{j2},\dots,\gamma_{jK}|\theta)\\=&\prod_{k=1}^K\prod_{j=1}^N\left[\alpha_k\phi(y_j|\theta_k)\right]^{\gamma_{jk}}\\=&\prod_{k=1}^K\alpha_k^{n_k}\prod_{j=1}^N\left[\phi(y_j|\theta_k)\right]^{\gamma_{jk}}\\=&\prod_{k=1}^K\alpha_k^{n_k}\prod_{j=1}^N\left[\frac{1}{\sqrt{2\pi}\sigma_k}\exp\left(-\frac{(y_j-\mu_k)^2}{2\sigma^2}\right)\right]^{\gamma_{jk}}\\\end{aligned}</script><p>其中$n_k=\sum_{j=1}^N\gamma_{jk}, \sum_{k=1}^Kn_k=N$</p></li><li><p>完全数据对数似然函数</p><script type="math/tex; mode=display">\log P(y,\gamma|\theta)=\sum_{k=1}^K\left\{n_k\log \alpha_k+\sum_{j=1}^N\gamma_{jk}\left[\log \left(\frac{1}{\sqrt{2\pi}}\right)-\log \sigma_k -\frac{1}{2\sigma^2}(y_j-\mu_k)^2\right]\right\}</script><h5 id="2-E步-确定Q函数"><a href="#2-E步-确定Q函数" class="headerlink" title="2. E步,确定Q函数"></a>2. E步,确定Q函数</h5></li></ul><p>把$Q$ 函数表示成参数形式</p><script type="math/tex; mode=display">\begin{aligned}Q\left(\theta, \theta^{(i)}\right) &=E\left[\log P(y, \gamma | \theta) | y, \theta^{(i)}\right] \\&=E\left\{\sum_{k=1}^{K}\left\{n_{k} \log \alpha_{k}+\sum_{j=1}^{N} \gamma_{j k}\left[\log \left(\frac{1}{\sqrt{2 \pi}}\right)-\log \sigma_{k}-\frac{1}{2 \sigma^{2}\left(y_{j}-\mu_{k}\right)^{2}}\right]\right\}\right\} \\&=E\left\{\sum_{k=1}^{K}\left\{\sum_{j=1}^{N} \gamma_{j k} \log \alpha_{k}+\sum_{j=1}^{N} \gamma_{j k}\left[\log \left(\frac{1}{\sqrt{2 \pi}}\right)-\log \sigma_{k}-\frac{1}{2 \sigma^{2}\left(y_{j}-\mu_{k}\right)^{2}}\right]\right\}\right\} \\&=\sum_{k=1}^{K}\left\{\sum_{j=1}^{N}\left(E \gamma_{j k}\right) \log \alpha_{k}+\sum_{j=1}^{N}\left(E \gamma_{j k}\right)\left[\log \left(\frac{1}{\sqrt{2 \pi}}\right)-\log \sigma_{k}-\frac{1}{2 \sigma^{2}\left(y_{j}-\mu_{k}\right)^{2}}\right]\right\}\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}\hat \gamma _{jk}= &\color{purple}E(\gamma_{jk}|y,\theta)=P(\gamma_{jk}=1|y,\theta)\\=&\frac{P(\gamma_{jk}=1,y_j|\theta)}{\sum_{k=1}^KP(\gamma_{jk}=1,y_j|\theta)}\\=&\frac{P(y_j|\color{red}\gamma_{jk}=1,\theta\color{black})\color{green}P(\gamma_{jk}=1|\theta)}{\sum_{k=1}^KP(y_j|\gamma_{jk}=1,\theta)P(\gamma_{jk}=1|\theta)}\\=&\frac{\color{green}\alpha_k\color{black}\phi(y_j|\color{red}\theta_k)}{\sum_{k=1}^K\alpha_k\phi(y_j|\theta_k)}\end{aligned}</script><p>   这部分内容就是搬运了书上的公式，有几点说明:</p><ol><li>注意这里$E(\gamma_{jk}|y,\theta)$，记为$\hat\gamma_{jk}$， 对应了E步求的<strong>期望</strong>中的一部分。</li><li>对应理解一下上面公式中的红色，蓝色和绿色部分，以及$\hat\gamma_{jk}$中红色和绿色的对应关系</li><li>这里用到了$n_k=\sum_{j=1}^N\gamma_{jk}$</li><li>$\hat \gamma_{jk}$为分模型$k$对观测数据$y_j$的响应度。这里，紫色标记的第一行参考伯努利分布的期望。</li></ol><script type="math/tex; mode=display">Q(\theta,\theta^{(i)})=\sum_{k=1}^Kn_k\log \alpha_k+\sum_{j=1}^N\hat \gamma_{jk}\left[\log \left(\frac{1}{\sqrt{2\pi}}\right)-\log \sigma_k-\frac{1}{2\sigma_k^2}(y_j-\mu_k)^2\right]</script><p>其中$i$表示第$i$步迭代</p><ol><li>写出$Q$ 函数在推导的时候有用，但是在程序计算的时候，E步需要计算的就是$\hat\gamma_{jk}$，M步用到了这个结果。其实抄公式没有什么意义，主要是能放慢看公式的速度。和图表一样，公式简洁的表达了很多信息，公式中也许更能体会到数学之美。</li></ol><h5 id="3-M步-1"><a href="#3-M步-1" class="headerlink" title="3. M步"></a>3. M步</h5><p>求函数$Q(\theta,\theta^{(i)})$对$\theta$的极大值，分别求$\sigma, \mu, \alpha$</p><script type="math/tex; mode=display">\theta^{(i+1)}=\arg\max_\theta Q(\theta,\theta^{(i)})</script><ul><li>$\arg\max$ 就是求Q的极值对应的参数$\theta$，如说是离散的，遍历所有值，最大查找，如果是连续的，偏导为零求极值。</li><li>$\frac {\partial Q}{\partial \mu_k}=0, \frac {\partial{Q}}{\partial{\sigma^2}}= 0$  得到$\hat\mu_k, \hat \sigma_k^2$</li><li>$\sum_{k=1}^K\alpha_k=1, \frac{\partial{Q}}{\partial{\alpha_k}}=0$ 得到$\alpha_k$</li></ul><h5 id="4-停止条件"><a href="#4-停止条件" class="headerlink" title="4. 停止条件"></a>4. 停止条件</h5><p>重复以上计算，直到对数似然函数值不再有明显的变化为止。</p><h4 id="算法9-2"><a href="#算法9-2" class="headerlink" title="算法9.2"></a>算法9.2</h4><p>这部分摘要总结了前面的公式。</p><p>因为公式比较集中，方便对比，注意体会以下两个方面:</p><ol><li>这几个公式中待求的变量的维度和角标的关系。</li><li>这里面有求和，前面提到过要注意体会每一步刷的是模型，还是样本</li></ol><h4 id="GMM在CV中的应用"><a href="#GMM在CV中的应用" class="headerlink" title="GMM在CV中的应用"></a>GMM在CV中的应用</h4><p>其实CV中用到了很多统计的方法，GMM在GrabCut方法中用于前景和背景建模。</p><h3 id="Kmeans"><a href="#Kmeans" class="headerlink" title="Kmeans"></a>Kmeans</h3><p>另外，直觉上看，GMM最直观的想法就是Kmeans，那么:</p><ol><li>在Kmeans常见的描述中都有距离的概念，对应在算法9.2 的描述中，该如何理解?<br>这里面距离对应了方差，二范数平方。</li><li>那么又是怎么在每轮刷过距离之后，重新划分样本的分类呢?<br>这里对应了响应度，响应度对应了一个$j \times k$的矩阵，记录了每一个$y_j$ 对第$k$个模型的响应度，可以理解为划分了类别。</li></ol><h4 id="K怎么定"><a href="#K怎么定" class="headerlink" title="K怎么定"></a>K怎么定</h4><ul><li>手肘法</li><li>Gap Statistics<sup><a href="#fn_1" id="reffn_1">1</a></sup></li></ul><h3 id="广义期望极大"><a href="#广义期望极大" class="headerlink" title="广义期望极大"></a>广义期望极大</h3><p>广义期望极大(generalized expectation maximization, $GEM$)</p><p>广义期望极大是为了解决什么问题？</p><p>看名字是为了通用解决方案吧</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="习题9-3"><a href="#习题9-3" class="headerlink" title="习题9.3"></a>习题9.3</h3><p>GMM模型的参数($\alpha _k, \mu _k, \sigma^2_k $)应该是$3k$个，题目9.3中提出两个分量的高斯混合模型的5个参数，是因为参数$\alpha_k$满足$\sum_{k=1}^K\alpha _k=1$</p><h3 id="习题9-4"><a href="#习题9-4" class="headerlink" title="习题9.4"></a>习题9.4</h3><p>EM算法用到朴素贝叶斯的非监督学习，就是说没有标注的数据。    </p><p>这个题目可以参考<a href="https://ttic.uchicago.edu/~suriya/website-intromlss2018/course_material/Day10a.pdf" target="_blank" rel="noopener">https://ttic.uchicago.edu/~suriya/website-intromlss2018/course_material/Day10a.pdf</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><blockquote id="fn_3"><sup>3</sup>. <a href="-">Maximum-likelihood from incomplete data via the EM algorithm</a><a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote></li><li><p><a href="https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm" target="_blank" rel="noopener">EM Algorithm</a></p></li><li><p><a href="http://scikit-learn.org/stable/modules/mixture.html" target="_blank" rel="noopener">Sklearn Gaussian Mixed Model</a></p></li><li><blockquote id="fn_1"><sup>1</sup>. <a href="https://web.stanford.edu/~hastie/Papers/gap.pdf" target="_blank" rel="noopener">Gap Statistics</a><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_2"><sup>2</sup>. <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%85%83%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83" target="_blank" rel="noopener">多元正态分布</a><a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote></li><li><p><a href="[https://mml-book.com](https://mml-book.com/">mml</a>)</p></li><li><blockquote id="fn_3 "><sup>3 </sup>. <a href="https://www.quora.com/What-is-the-difference-between-probability-and-likelihood-1/answer/Jason-Eisner" target="_blank" rel="noopener">probability and likelihood</a><a href="#reffn_3 " title="Jump back to footnote [3 ] in the text."> &#8617;</a></blockquote></li><li><blockquote id="fn_4"><sup>4</sup>. <a href="https://en.wikipedia.org/wiki/Convex_combination" target="_blank" rel="noopener">Convex Combination</a><a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote></li></ol><p><strong><a href="#导读">⬆ top</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高斯混合模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EfficientNet</title>
      <link href="/2020/06/15/EfficientNet/"/>
      <url>/2020/06/15/EfficientNet/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是EfficientNet"><a href="#什么是EfficientNet" class="headerlink" title="什么是EfficientNet"></a>什么是EfficientNet</h3><p><strong>EfficientNet</strong>的设想就是能否设计一个标准化的卷积网络扩展方法，既可以实现较高的准确率，又可以充分的节省算力资源。因而问题可以描述成，如何平衡分辨率、深度和宽度这三个维度，来实现网络在效率和准确率上的优化</p><h3 id="复合模型缩放法-compound-scaling-methd"><a href="#复合模型缩放法-compound-scaling-methd" class="headerlink" title="复合模型缩放法(compound scaling methd)"></a>复合模型缩放法(compound scaling methd)</h3><p>谷歌给出的调整方法，以此来实现三个维度上的平衡，让网络的准确率最大化</p><p><img src="/2020/06/15/EfficientNet/1.png" alt></p><a id="more"></a><blockquote><p>在上图中，(a)模型为baseline，(b)-(d)在(a)的基础上分别进行了单一维度的调整，而(e)则同时对三个维度同时进行了一定的调整</p></blockquote><h4 id="把扩展转化为数学问题进行描述"><a href="#把扩展转化为数学问题进行描述" class="headerlink" title="把扩展转化为数学问题进行描述"></a>把扩展转化为数学问题进行描述</h4><p>首先，我们把整个卷积网络称为N，他的第i个卷积层可以看作下面的函数映射：</p><script type="math/tex; mode=display">Y_i = F_i(X_i)</script><p>Y_i是输出张量，X_i是输入张量，假设这个X_i的维度是<Hi,Wi,Ci></Hi,Wi,Ci></p><p>最后，我们可以把讲卷积网络N定义为：</p><p><img src="/2020/06/15/EfficientNet/2.png" alt></p><p>其中，下表1…s表示stage的讯号，F_i表示对第i层的卷积运算，L_i的意思是F_i在第i个stage中有Li个一样结构的卷积层。<Hi, wi, ci>表示第i层输入的shape。</Hi,></p><p>为了减小搜索空间，作者先固定了网络的基本结构，而只改变上面公式中的三个缩放维度</p><ul><li>L_i就是网络的深度</li><li>C_i就是通道数，既网络的宽度</li><li>H_i,W_i是分辨率</li></ul><p>就算如此，这也有三个参数要调整，搜索空间也是非常的大，因此EfficientNet的设想是<strong>一个卷积网络所有的卷积层必须通过相同的比例常数进行统一扩展</strong>，这句话的意思是，三个参数乘上常数倍率。所以个一个模型的扩展问题，可以转化为一个<strong>规划问题</strong>：</p><p><img src="/2020/06/15/EfficientNet/3.png" alt></p><p>其中，优化的目标为模型的准确率，而约束条件为计算资源。这个算式表现为在给定计算内存和效率的约束下，如何优化参数d、w和r来实现最好的模型准确率。</p><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><p>对于需要调整的三个维度：</p><ul><li><p><strong>Depth</strong>: The intuition is that deeperConvNet can capture richer and more complex features, and</p><p>generalize well on new tasks.</p></li><li><p><strong>Width</strong>: wider networks tend to be able to capture more fine-grained features and are easier to train.</p></li><li><p><strong>Resolution</strong>: With higher resolution input images, ConvNets can potentially capture more fine-grained patterns.</p></li></ul><ol><li>第一个实验，对三个维度固定了两个，只缩放其中一个，得到结果如下：</li></ol><p><img src="/2020/06/15/EfficientNet/4.png" alt></p><p><strong>结论：三个维度中任一维度的放大都可以带来精度的提升，但是随着倍率的越来越大，提升越来越小。</strong></p><ol><li>第二个实验，尝试在不同的d，r组合下变动w，得到下图：</li></ol><p><img src="/2020/06/15/EfficientNet/5.png" alt></p><p>从实验结果来看，最高精度相比之前已经有所提升，而且组合不同，效果不同。作者又得到了一个观点：得到了更高的精度以及效率的关键是<strong>平衡网络的宽度，网络深度，网络分辨率三个维度的缩放倍率</strong></p><p>之后，作者提出了<strong>模型复合缩放方法</strong>：</p><p><img src="/2020/06/15/EfficientNet/6.png" alt></p><p>考虑到如果网络深度翻番那么对应的计算量翻倍，网络宽度和图像分辨率翻番对应的计算量会翻4倍，卷积操作的计算量与d,w^2, r^2 成正比。在这个约束下，网络的计算量大约是之前的2^ϕ 倍.</p><h3 id="EfficientNet的网络结构"><a href="#EfficientNet的网络结构" class="headerlink" title="EfficientNet的网络结构"></a>EfficientNet的网络结构</h3><p>EfficientNet使用了MobileNet V2中的<strong>MBCConv</strong>作为模型的主干网络，同时也是用了SENet中的<strong>squeeze and excitation</strong>方法对网络结构进行了优化。</p><p><img src="/2020/06/15/EfficientNet/7.png" alt></p><p>对于EfficientNet-B0这样的一个基线网络，如何使用复合扩展发对该网络进行扩展呢？主要就是分两步走：</p><p><img src="/2020/06/15/EfficientNet/8.png" alt></p><p>最后，作者便由此扩展出了一系列的网络结构，如下所示：</p><p><img src="/2020/06/15/EfficientNet/9.png" alt></p><p>而对于普通人来说做扩展的代价过于昂贵，所以最好的方法便是进行迁移学习</p><h4 id="迁移学习和finetune的区别"><a href="#迁移学习和finetune的区别" class="headerlink" title="迁移学习和finetune的区别"></a>迁移学习和finetune的区别</h4><ul><li><strong>finetune：</strong>我们假设在Resnet101后面加上一个全连接层，然后我们锁住前面Resnet的参数，不参加梯度更新，然后只更新最后一个全连接层的参数。当全连接层的loss足够小的时候，再释放所有的参数一起训练。这样Resnet的参数也会微微调整，这就是finetune；</li><li><strong>迁移学习：</strong>就不再训练之前的网络，而是把之前网络的输出的特征看作为我们自己网络的输入特征而已，而不再是一个要训练的网络的概念</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
